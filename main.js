(()=>{"use strict";class t{constructor(t){this.title=t}}const e=document.forms["project-form"];e.addEventListener("submit",(t=>{t.preventDefault()}));const s=(()=>{const s=(t,e)=>{let s;return s="low"===t[e].priority?"success":"medium"===t[e].priority?"info":"danger",s},n=(t,e)=>{const i=document.querySelector("#tasks-list");i.innerHTML="";const l=e.filter((t=>!0===t.exists)),a=document.querySelector("#add-task"),r=document.querySelector("#multiCollapseExample2");if("All Projects"===t){a.classList.add("d-none"),r.classList.add("d-none");for(let t=0;t<l.length;t+=1){const e=s(l,t);i.innerHTML+=`\n                    <li class="">\n                        <p>\n                            <button class="btn btn-${e} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${t}" aria-expanded="false" aria-controls="task-${t}">\n                                ${l[t].title}\n                            </button>\n                        </p>\n                        \n                        <div class="collapse" id="task-${t}">\n                            <div class="card card-body bg-${e} mb-4">\n                                <ul class="list-group">\n                                    <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Description</span>: ${l[t].description}</li>\n                                    <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Due Date</span>: ${l[t].dueDate}</li>\n                                    <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Priority</span>: ${l[t].priority}</li>\n                                </ul>\n                            </div>\n                        </div>\n                    </li>\n                `}}else{a.classList.remove("d-none"),r.classList.remove("d-none");const l=e.filter((e=>e.project===t&&!0===e.exists));for(let e=0;e<l.length;e+=1){const a=s(l,e);i.innerHTML+=`\n                    <li class="">\n                        <p>\n                            <button class="btn btn-${a} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${e}" aria-expanded="false" aria-controls="task-${e}">\n                                ${l[e].title}\n                            </button>\n                        </p>\n                        \n                        <div class="collapse" id="task-${e}">\n                            <div class="card card-body bg-${a} mb-4">\n                                <ul class="list-group ">\n                                    <li class="list-group-item bg-${a} text-white"><span class="fw-bold">Description</span>: ${l[e].description}</li>\n                                    <li class="list-group-item bg-${a} text-white"><span class="fw-bold">Due Date</span>: ${l[e].dueDate}</li>\n                                    <li class="list-group-item bg-${a} text-white"><span class="fw-bold">Priority</span>: ${l[e].priority}</li>\n                                </ul>\n                                \n                                <div class="d-flex mt-3">\n                                    <button type="button" class="btn btn-outline-dark mx-3">Edit</button>\n                                    <button id="delete-task" type="button" class="btn btn-outline-warning">Delete</button>\n                                </div>\n                                \n                            </div>\n                        </div>\n                    </li>\n                `,document.querySelector("#delete-task").onclick=()=>{l[e].exists=!1,n(t,l)}}}};return{addProject:s=>{document.querySelector("#project-btn").addEventListener("click",(()=>{(s=>{const n=e.querySelector("#project-title").value;if(""===n)return;const i=new t(n);s.push(i)})(s),(t=>{const e=document.querySelector("#project-list");e.innerHTML='\n            <li class="list-group-item list-group-item-dark btn my-1" id="project-list">All Projects</li>\n        ';for(let s=0;s<t.length;s+=1)e.innerHTML+=`\n                <li class="list-group-item list-group-item-dark btn my-1" id="project-list">${t[s].title}</li>\n            `})(s),document.querySelector("#project-form")}))},displayProjectTasks:t=>{const e=document.querySelector("#project-list");e.addEventListener("click",(s=>{const i=s.target.textContent;((t,e)=>{const s=t.target;[...e.children].forEach((t=>{t.classList.remove("active")})),s.classList.add("active"),document.querySelector("#task-display").classList.remove("d-none")})(s,e),(t=>{const e=document.querySelector("#project");e.innerHTML="",e.innerHTML+=`\n        <input type="hidden" value="${t}" id="task-project" class="form-control" aria-label="Default select example">\n    `})(i),n(i,t)}))}}})();class n{constructor(t,e,s,n,i="default"){this.title=t,this.description=e,this.dueDate=s,this.priority=n,this.project=i,this.exists=!0}static deleteTask(t,e,s,n,i){n.addEventListener("click",(n=>{n.target.id===`delete-btn-${s}`&&(t[s].exists=!1,i(e,t))}))}static editTask(t,e,s,n,i){n.addEventListener("click",(n=>{if(n.target.id===`edit-btn-${s}`){const n=document.querySelector(`#edit-task-name-${s}`).value,l=document.querySelector(`#edit-task-description-${s}`).value,a=document.querySelector(`#edit-task-date-${s}`).value,r=document.querySelector(`#edit-task-priority-${s}`).value;if(""===n)return;if(""===l)return;if(""===a)return;if(""===r)return;t[s].title=n,t[s].description=l,t[s].dueDate=a,t[s].priority=r,i(e,t)}}))}}const i=document.forms["tasks-form"];i.addEventListener("submit",(t=>{t.preventDefault()}));const l=(()=>{const t=(t,e)=>{let s;return s="low"===t[e].priority?"success":"medium"===t[e].priority?"info":"danger",s},e=t=>{let e,s;return"success"!==t&&"info"!==t||(e="warning",s="danger"),"danger"===t&&(e="primary",s="warning"),[e,s]},s=(s,i)=>{const a=document.querySelector("#tasks-list");a.innerHTML="";const r=i.filter((t=>t.project===s&&!0===t.exists));for(let i=0;i<r.length;i+=1){const o=t(r,i);a.innerHTML+=`\n            <li>\n                <p>\n                    <button class="btn btn-${o} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${i}" aria-expanded="false" aria-controls="task-${i}">\n                        ${r[i].title}\n                    </button>\n                </p>\n                    \n                <div class="collapse" id="task-${i}">\n                    <div class="card card-body bg-${o} mb-4">\n                        <ul class="list-group ">\n                            <li class="list-group-item bg-${o} text-white"><span class="fw-bold">Description</span>: ${r[i].description}</li>\n                            <li class="list-group-item bg-${o} text-white"><span class="fw-bold">Due Date</span>: ${r[i].dueDate}</li>\n                            <li class="list-group-item bg-${o} text-white"><span class="fw-bold">Priority</span>: ${r[i].priority}</li>\n                        </ul>\n                    \n                        <div class="d-flex mt-3 justify-content-between">\n                            <div>\n                                <p>\n                                    <button class="btn btn-${e(o)[0]}" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample-${i}" aria-expanded="false" aria-controls="collapseExample-${i}">\n                                        Edit\n                                    </button>\n\n                                    <button id="delete-btn-${i}" type="button" class="btn btn-${e(o)[1]}">Delete</button>\n                                </p>\n\n                                <div class="collapse multi-collapse" id="collapseExample-${i}">\n                                    <form id="edit-tasks-form">\n                                        <div class="mb-3">\n                                            <label for="edit-task-name" class="form-label text-info">Task Title</label>\n                                            <input type="text" class="form-control" id="edit-task-name-${i}">\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-description" class="form-label text-info">Task Description</label>\n                                            <input type="text" class="form-control" id="edit-task-description-${i}">\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-date" class="form-label text-info">Due Date</label>\n                                            <br>\n                                            <input type="date" id="edit-task-date-${i}" name="trip-start">\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-priority" class="form-label text-info">Priority</label>\n                                            <select id="edit-task-priority-${i}" class="form-select" aria-label="Default select example">\n                                                <option selected>Select Priority</option>\n                                                <option value="low">Low</option>\n                                                <option value="medium">Medium</option>\n                                                <option value="high">High</option>\n                                            </select>\n                                        </div>\n                                        <div>\n                                            <button id="edit-btn-${i}" type="submit" class="btn btn-secondary">Edit Task</button>\n                                        </div\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </li>\n            `,document.querySelector(`#edit-task-name-${i}`).setAttribute("value",r[i].title),document.querySelector(`#edit-task-description-${i}`).setAttribute("value",r[i].description),document.querySelector(`#edit-task-date-${i}`).setAttribute("value",r[i].dueDate),document.querySelector(`#edit-task-priority-${i}`).setAttribute("value",r[i].priority),n.deleteTask(r,s,i,a,l.renderTask),n.editTask(r,s,i,a,l.renderTask)}};return{createNewTask:t=>{document.querySelector("#task-btn").addEventListener("click",(()=>{const e=i.querySelector("#task-name").value,l=i.querySelector("#task-description").value,a=i.querySelector("#task-date").value,r=i.querySelector("#task-priority").value,o=i.querySelector("#task-project").value;""!==e&&""!==l&&""!==a&&""!==r&&(((t,e,s,i,l,a)=>{const r=new n(e,s,i,l,a);t.push(r)})(t,e,l,a,r,o),s(o,t),document.querySelector("#tasks-form"))}))},renderTask:s}})(),a=[{title:"Task 1",description:"Description 1",dueDate:"2021-06-10",priority:"low",project:"Project 1",exists:!0},{title:"Task 2",description:"Description 2",dueDate:"2021-06-10",priority:"medium",project:"Project 2",exists:!0},{title:"Task 3",description:"Description 3",dueDate:"2021-06-10",priority:"high",project:"Project 3",exists:!0}];s.addProject([],a),s.displayProjectTasks(a),l.createNewTask(a,l.renderTask)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,