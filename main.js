(()=>{"use strict";const t=(()=>{const t=()=>{const t=document.forms["project-form"];return t.addEventListener("submit",(t=>{t.preventDefault()})),t},e=(t,s,n)=>{const i=document.querySelector("#tasks-list");i.innerHTML="";const l=s.filter((t=>!0===t.exists)),a=document.querySelector("#add-task"),o=document.querySelector("#multiCollapseExample2");if("All Projects"===t){a.classList.add("d-none"),o.classList.add("d-none");for(let t=0;t<l.length;t+=1){const e=n(l,t);i.innerHTML+=`\n                    <li class="">\n                        <p>\n                            <button class="btn btn-${e} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${t}" aria-expanded="false" aria-controls="task-${t}">\n                                ${l[t].title}\n                            </button>\n                        </p>\n                        \n                        <div class="collapse" id="task-${t}">\n                            <div class="card card-body bg-${e} mb-4">\n                                <ul class="list-group">\n                                    <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Description</span>: ${l[t].description}</li>\n                                    <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Due Date</span>: ${l[t].dueDate}</li>\n                                    <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Priority</span>: ${l[t].priority}</li>\n                                </ul>\n                            </div>\n                        </div>\n                    </li>\n                `}}else{a.classList.remove("d-none"),o.classList.remove("d-none");const l=s.filter((e=>e.project===t&&!0===e.exists));for(let s=0;s<l.length;s+=1){const a=n(l,s);i.innerHTML+=`\n                    <li class="">\n                        <p>\n                            <button class="btn btn-${a} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${s}" aria-expanded="false" aria-controls="task-${s}">\n                                ${l[s].title}\n                            </button>\n                        </p>\n                        \n                        <div class="collapse" id="task-${s}">\n                            <div class="card card-body bg-${a} mb-4">\n                                <ul class="list-group ">\n                                    <li class="list-group-item bg-${a} text-white"><span class="fw-bold">Description</span>: ${l[s].description}</li>\n                                    <li class="list-group-item bg-${a} text-white"><span class="fw-bold">Due Date</span>: ${l[s].dueDate}</li>\n                                    <li class="list-group-item bg-${a} text-white"><span class="fw-bold">Priority</span>: ${l[s].priority}</li>\n                                </ul>\n                                \n                                <div class="d-flex mt-3">\n                                    <button type="button" class="btn btn-outline-dark mx-3">Edit</button>\n                                    <button id="delete-task" type="button" class="btn btn-outline-warning">Delete</button>\n                                </div>\n                                \n                            </div>\n                        </div>\n                    </li>\n                `,document.querySelector("#delete-task").onclick=()=>{l[s].exists=!1,e(t,l)}}}};return{addProject:(e,s)=>{document.querySelector("#project-btn").addEventListener("click",(()=>{t(),((t,e,s)=>{const n=e().querySelector("#project-title").value;if(""===n)return;const i=new s(n);t.push(i)})(e,t,s),(t=>{const e=document.querySelector("#project-list");e.innerHTML='\n            <li class="list-group-item list-group-item-dark btn my-1" id="project-list">All Projects</li>\n        ';for(let s=0;s<t.length;s+=1)e.innerHTML+=`\n                <li class="list-group-item list-group-item-dark btn my-1" id="project-list">${t[s].title}</li>\n            `})(e),document.querySelector("#project-form").reset()}))},displayProjectTasks:(t,s)=>{const n=document.querySelector("#project-list");n.addEventListener("click",(i=>{const l=i.target.textContent;((t,e)=>{const s=t.target;[...e.children].forEach((t=>{t.classList.remove("active")})),s.classList.add("active"),document.querySelector("#task-display").classList.remove("d-none")})(i,n),(t=>{const e=document.querySelector("#project");e.innerHTML="",e.innerHTML+=`\n        <input type="hidden" value="${t}" id="task-project" class="form-control" aria-label="Default select example">\n    `})(l),e(l,t,s)}))}}})(),e=(()=>{const t=(t,s)=>{const n=document.querySelector("#tasks-list");n.innerHTML="";const i=s.filter((e=>e.project===t&&!0===e.exists));for(let s=0;s<i.length;s+=1){const l=getColor(i,s);n.innerHTML+=`\n            <li>\n                <p>\n                    <button class="btn btn-${l} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${s}" aria-expanded="false" aria-controls="task-${s}">\n                        ${i[s].title}\n                    </button>\n                </p>\n                    \n                <div class="collapse" id="task-${s}">\n                    <div class="card card-body bg-${l} mb-4">\n                        <ul class="list-group ">\n                            <li class="list-group-item bg-${l} text-white"><span class="fw-bold">Description</span>: ${i[s].description}</li>\n                            <li class="list-group-item bg-${l} text-white"><span class="fw-bold">Due Date</span>: ${i[s].dueDate}</li>\n                            <li class="list-group-item bg-${l} text-white"><span class="fw-bold">Priority</span>: ${i[s].priority}</li>\n                        </ul>\n                    \n                        <div class="d-flex mt-3 justify-content-between">\n                            <div>\n                                <p>\n                                    <button class="btn btn-${buttonColor(l)[0]}" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample-${s}" aria-expanded="false" aria-controls="collapseExample-${s}">\n                                        Edit\n                                    </button>\n\n                                    <button id="delete-btn-${s}" type="button" class="btn btn-${buttonColor(l)[1]}">Delete</button>\n                                </p>\n\n                                <div class="collapse multi-collapse" id="collapseExample-${s}">\n                                    <form id="edit-tasks-form">\n                                        <div class="mb-3">\n                                            <label for="edit-task-name" class="form-label text-info">Task Title</label>\n                                            <input type="text" class="form-control" id="edit-task-name-${s}">\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-description" class="form-label text-info">Task Description</label>\n                                            <input type="text" class="form-control" id="edit-task-description-${s}">\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-date" class="form-label text-info">Due Date</label>\n                                            <br>\n                                            <input type="date" id="edit-task-date-${s}" name="trip-start">\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-priority" class="form-label text-info">Priority</label>\n                                            <select id="edit-task-priority-${s}" class="form-select" aria-label="Default select example">\n                                                <option selected>Select Priority</option>\n                                                <option value="low">Low</option>\n                                                <option value="medium">Medium</option>\n                                                <option value="high">High</option>\n                                            </select>\n                                        </div>\n                                        <div>\n                                            <button id="edit-btn-${s}" type="submit" class="btn btn-secondary">Edit Task</button>\n                                        </div\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </li>\n            `,document.querySelector(`#edit-task-name-${s}`).setAttribute("value",i[s].title),document.querySelector(`#edit-task-description-${s}`).setAttribute("value",i[s].description),document.querySelector(`#edit-task-date-${s}`).setAttribute("value",i[s].dueDate),document.querySelector(`#edit-task-priority-${s}`).setAttribute("value",i[s].priority),Task.deleteTask(i,t,s,n,e.renderTask),Task.editTask(i,t,s,n,e.renderTask)}};return{createNewTask:(e,s)=>{const n=s();document.querySelector("#task-btn").addEventListener("click",(()=>{const s=n.querySelector("#task-name").value,i=n.querySelector("#task-description").value,l=n.querySelector("#task-date").value,a=n.querySelector("#task-priority").value,o=n.querySelector("#task-project").value;""!==s&&""!==i&&""!==l&&""!==a&&(((t,e,s,n,i,l)=>{const a=new Task(e,s,n,i,l);t.push(a)})(e,s,i,l,a,o),t(o,e),document.querySelector("#tasks-form").reset())}))},renderTask:t}})(),s=[{title:"Task 1",description:"Description 1",dueDate:"2021-06-10",priority:"low",project:"Project 1",exists:!0},{title:"Task 2",description:"Description 2",dueDate:"2021-06-10",priority:"medium",project:"Project 2",exists:!0},{title:"Task 3",description:"Description 3",dueDate:"2021-06-10",priority:"high",project:"Project 3",exists:!0}];class n{constructor(t){this.title=t}static getColor(t,e){let s;return s="low"===t[e].priority?"success":"medium"===t[e].priority?"info":"danger",s}}t.addProject([],n),t.displayProjectTasks(s,n.getColor()),e.createNewTask(s,e.renderTask)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qcy10b2RvbGlzdC8uL3NyYy9wcm9qZWN0RG9tLmpzIiwid2VicGFjazovL2pzLXRvZG9saXN0Ly4vc3JjL3Rhc2tEb20uanMiLCJ3ZWJwYWNrOi8vanMtdG9kb2xpc3QvLi9zcmMvbWFpbi5qcyJdLCJuYW1lcyI6WyJwcm9qZWN0Q3JlYXRpb24iLCJwcm9qZWN0Rm9ybSIsIlBST0pFQ1RfRk9STSIsImRvY3VtZW50IiwiZm9ybXMiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInByZXZlbnREZWZhdWx0IiwicmVuZGVyVGFza3MiLCJwcm9qZWN0TmFtZSIsInRhc2tzQXJyIiwiZ2V0Q29sb3IiLCJUQVNLX0xJU1QiLCJxdWVyeVNlbGVjdG9yIiwiaW5uZXJIVE1MIiwiYWxsVGFza3MiLCJmaWx0ZXIiLCJ0YXNrIiwiZXhpc3RzIiwiQUREX1RBU0tfQlROIiwiRk9STSIsImNsYXNzTGlzdCIsImFkZCIsImkiLCJsZW5ndGgiLCJjb2xvciIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJkdWVEYXRlIiwicHJpb3JpdHkiLCJyZW1vdmUiLCJwcm9qZWN0VGFza3MiLCJwcm9qZWN0Iiwib25jbGljayIsImFkZFByb2plY3QiLCJwcm9qZWN0QXJyIiwiUHJvamVjdCIsIlBST0pFQ1RfVElUTEUiLCJ2YWx1ZSIsIk5FV19QUk9KRUNUIiwicHVzaCIsImNyZWF0ZVByb2plY3QiLCJQUk9KRUNUX0xJU1QiLCJyZW5kZXJQcm9qZWN0VmlldyIsInJlc2V0IiwiZGlzcGxheVByb2plY3RUYXNrcyIsIlBST0pFQ1RfTkFNRSIsInRhcmdldCIsInRleHRDb250ZW50IiwiZXZlbnQiLCJwcm9qZWN0TGlzdCIsIlBST0pFQ1QiLCJjaGlsZHJlbiIsImZvckVhY2giLCJwcm9qZWN0U2VsZWN0aW9uIiwiVEFTS19QUk9KRUNUIiwidGFza09wdGlvbnMiLCJ0YXNrQ3JlYXRpb24iLCJyZW5kZXJUYXNrIiwidGFza1Byb2plY3QiLCJUQVNLU19MSVNUIiwiYnV0dG9uQ29sb3IiLCJzZXRBdHRyaWJ1dGUiLCJUYXNrIiwiZGVsZXRlVGFzayIsImVkaXRUYXNrIiwiY3JlYXRlTmV3VGFzayIsInRhc2tGb3JtIiwiVEFTS1NfRk9STSIsIlRBU0tfTkFNRSIsIlRBU0tfREVTQ1JJUFRJT04iLCJUQVNLX0RBVEUiLCJUQVNLX1BSSU9SSVRZIiwibmFtZSIsImRhdGUiLCJuZXdUYXNrIiwidGFza3MiLCJ0aGlzIiwiYXJyIl0sIm1hcHBpbmdzIjoibUJBQ08sTUFBTUEsRUFBa0IsTUFDN0IsTUFBTUMsRUFBYyxLQUVsQixNQUFNQyxFQUFlQyxTQUFTQyxNQUFNLGdCQU1wQyxPQUpBRixFQUFhRyxpQkFBaUIsVUFBV0MsSUFDdkNBLEVBQUVDLG9CQUdHTCxHQWtESE0sRUFBYyxDQUFDQyxFQUFhQyxFQUFVQyxLQUMxQyxNQUFNQyxFQUFZVCxTQUFTVSxjQUFjLGVBQ3pDRCxFQUFVRSxVQUFZLEdBQ3RCLE1BQU1DLEVBQVdMLEVBQVNNLFFBQU9DLElBQXdCLElBQWhCQSxFQUFLQyxTQUN4Q0MsRUFBZWhCLFNBQVNVLGNBQWMsYUFDdENPLEVBQU9qQixTQUFTVSxjQUFjLDBCQUVwQyxHQUFvQixpQkFBaEJKLEVBQWdDLENBQ2xDVSxFQUFhRSxVQUFVQyxJQUFJLFVBQzNCRixFQUFLQyxVQUFVQyxJQUFJLFVBQ25CLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJUixFQUFTUyxPQUFRRCxHQUFLLEVBQUcsQ0FDM0MsTUFBTUUsRUFBUWQsRUFBU0ksRUFBVVEsR0FFakNYLEVBQVVFLFdBQWEsd0hBR3NCVywwRUFBOEVGLGdEQUFnREEsd0NBQ2pKUixFQUFTUSxHQUFHRyxnS0FJV0gsa0VBQ0dFLHdJQUVRQSwyREFBK0RWLEVBQVNRLEdBQUdJLHVGQUMzRUYsd0RBQTREVixFQUFTUSxHQUFHSyxtRkFDeEVILHdEQUE0RFYsRUFBU1EsR0FBR00sNktBT2pJLENBQ0xWLEVBQWFFLFVBQVVTLE9BQU8sVUFDOUJWLEVBQUtDLFVBQVVTLE9BQU8sVUFDdEIsTUFBTUMsRUFBZXJCLEVBQVNNLFFBQU9DLEdBQVFBLEVBQUtlLFVBQVl2QixJQUN2QyxJQUFoQlEsRUFBS0MsU0FDWixJQUFLLElBQUlLLEVBQUksRUFBR0EsRUFBSVEsRUFBYVAsT0FBUUQsR0FBSyxFQUFHLENBQy9DLE1BQU1FLEVBQVFkLEVBQVNvQixFQUFjUixHQUVyQ1gsRUFBVUUsV0FBYSx3SEFHc0JXLDBFQUE4RUYsZ0RBQWdEQSx3Q0FDakpRLEVBQWFSLEdBQUdHLGdLQUlPSCxrRUFDR0UseUlBRVFBLDJEQUErRE0sRUFBYVIsR0FBR0ksdUZBQy9FRix3REFBNERNLEVBQWFSLEdBQUdLLG1GQUM1RUgsd0RBQTRETSxFQUFhUixHQUFHTSxzakJBYXpIMUIsU0FBU1UsY0FBYyxnQkFDL0JvQixRQUFVLEtBQ2ZGLEVBQWFSLEdBQUdMLFFBQVMsRUFDekJWLEVBQVlDLEVBQWFzQixPQXdDakMsTUFBTyxDQUNMRyxXQWxDaUIsQ0FBQ0MsRUFBWUMsS0FDVmpDLFNBQVNVLGNBQWMsZ0JBRS9CUixpQkFBaUIsU0FBUyxLQUVwQ0osSUFoSWtCLEVBQUNrQyxFQUFZbEMsRUFBYW1DLEtBQzlDLE1BQU1DLEVBQWdCcEMsSUFBY1ksY0FBYyxrQkFBa0J5QixNQUNwRSxHQUFzQixLQUFsQkQsRUFDRixPQUdGLE1BQU1FLEVBQWMsSUFBSUgsRUFBUUMsR0FDaENGLEVBQVdLLEtBQUtELElBNEhkRSxDQUFjTixFQUFZbEMsRUFBYW1DLEdBekhqQixDQUFDRCxJQUN6QixNQUFNTyxFQUFldkMsU0FBU1UsY0FBYyxpQkFDNUM2QixFQUFhNUIsVUFBWSx3SEFJekIsSUFBSyxJQUFJUyxFQUFJLEVBQUdBLEVBQUlZLEVBQVdYLE9BQVFELEdBQUssRUFDMUNtQixFQUFhNUIsV0FBYSxpR0FDOERxQixFQUFXWixHQUFHRyw0QkFvSHRHaUIsQ0FBa0JSLEdBR2xCaEMsU0FBU1UsY0FBYyxpQkFBaUIrQixZQW9COUJDLG9CQWZjLENBQUNuQyxFQUFVQyxLQUNyQyxNQUFNK0IsRUFBZXZDLFNBQVNVLGNBQWMsaUJBRTVDNkIsRUFBYXJDLGlCQUFpQixTQUFVQyxJQUN0QyxNQUFNd0MsRUFBZXhDLEVBQUV5QyxPQUFPQyxZQWpIVCxFQUFDQyxFQUFPQyxLQUMvQixNQUFNQyxFQUFVRixFQUFNRixPQUVMLElBQUlHLEVBQVlFLFVBQ3hCQyxTQUFTckIsSUFDaEJBLEVBQVFYLFVBQVVTLE9BQU8sYUFHM0JxQixFQUFROUIsVUFBVUMsSUFBSSxVQUNEbkIsU0FBU1UsY0FBYyxpQkFDL0JRLFVBQVVTLE9BQU8sV0F5RzVCd0IsQ0FBaUJoRCxFQUFHb0MsR0E1SEosQ0FBQ2pDLElBRW5CLE1BQU04QyxFQUFlcEQsU0FBU1UsY0FBYyxZQUM1QzBDLEVBQWF6QyxVQUFZLEdBQ3pCeUMsRUFBYXpDLFdBQWEseUNBQ1FMLHdGQXlIaEMrQyxDQUFZVixHQUVadEMsRUFBWXNDLEVBQWNwQyxFQUFVQyxTQXJLWCxHQ0FsQjhDLEVBQWUsTUFFMUIsTUFtQk1DLEVBQWEsQ0FBQ0MsRUFBYWpELEtBQy9CLE1BQU1rRCxFQUFhekQsU0FBU1UsY0FBYyxlQUUxQytDLEVBQVc5QyxVQUFZLEdBQ3ZCLE1BQU1pQixFQUFlckIsRUFBU00sUUFBT0MsR0FBUUEsRUFBS2UsVUFBWTJCLElBQ3ZDLElBQWhCMUMsRUFBS0MsU0FFWixJQUFLLElBQUlLLEVBQUksRUFBR0EsRUFBSVEsRUFBYVAsT0FBUUQsR0FBSyxFQUFHLENBQy9DLE1BQU1FLEVBQVFkLFNBQVNvQixFQUFjUixHQUVyQ3FDLEVBQVc5QyxXQUFhLHVGQUdlVywwRUFBOEVGLGdEQUFnREEsZ0NBQ2pKUSxFQUFhUixHQUFHRyxvSUFJT0gsMERBQ0dFLHlIQUVRQSwyREFBK0RNLEVBQWFSLEdBQUdJLCtFQUMvRUYsd0RBQTRETSxFQUFhUixHQUFHSywyRUFDNUVILHdEQUE0RE0sRUFBYVIsR0FBR00scVJBTTNFZ0MsWUFBWXBDLEdBQU8sZ0ZBQWdGRiwyREFBMkRBLGtLQUk5SkEsbUNBQW1Dc0MsWUFBWXBDLEdBQU8seUpBR3hCRixxV0FJY0Esa1lBS09BLHlZQU01QkEsc1dBS1BBLGduQkFRVkEsNlZBVzdEcEIsU0FBU1UsY0FBYyxtQkFBbUJVLEtBQUt1QyxhQUFhLFFBQVMvQixFQUFhUixHQUFHRyxPQUNyRnZCLFNBQVNVLGNBQWMsMEJBQTBCVSxLQUFLdUMsYUFBYSxRQUFTL0IsRUFBYVIsR0FBR0ksYUFDNUZ4QixTQUFTVSxjQUFjLG1CQUFtQlUsS0FBS3VDLGFBQWEsUUFBUy9CLEVBQWFSLEdBQUdLLFNBQ3JGekIsU0FBU1UsY0FBYyx1QkFBdUJVLEtBQzNDdUMsYUFBYSxRQUFTL0IsRUFBYVIsR0FBR00sVUFFekNrQyxLQUFLQyxXQUFXakMsRUFDZDRCLEVBQ0FwQyxFQUNBcUMsRUFDQUgsRUFBYUMsWUFFZkssS0FBS0UsU0FBU2xDLEVBQ1o0QixFQUNBcEMsRUFDQXFDLEVBQ0FILEVBQWFDLGNBNkNuQixNQUFPLENBQ0xRLGNBekNvQixDQUFDeEQsRUFBVXlELEtBQy9CLE1BQU1DLEVBQWFELElBQ0ZoRSxTQUFTVSxjQUFjLGFBQy9CUixpQkFBaUIsU0FBUyxLQUNqQyxNQUFNZ0UsRUFBWUQsRUFBV3ZELGNBQWMsY0FBY3lCLE1BQ25EZ0MsRUFBbUJGLEVBQ3RCdkQsY0FBYyxxQkFDZHlCLE1BQ0dpQyxFQUFZSCxFQUFXdkQsY0FBYyxjQUFjeUIsTUFDbkRrQyxFQUFnQkosRUFBV3ZELGNBQWMsa0JBQWtCeUIsTUFDM0RpQixFQUFlYSxFQUFXdkQsY0FBYyxpQkFBaUJ5QixNQUU3QyxLQUFkK0IsR0FHcUIsS0FBckJDLEdBR2MsS0FBZEMsR0FHa0IsS0FBbEJDLElBM0hRLEVBQUM5RCxFQUFVK0QsRUFBTTlDLEVBQWErQyxFQUFNN0MsRUFBVUcsS0FDNUQsTUFBTTJDLEVBQVUsSUFBSVosS0FBS1UsRUFBTTlDLEVBQWErQyxFQUFNN0MsRUFBVUcsR0FDNUR0QixFQUFTOEIsS0FBS21DLElBOEhaQSxDQUFRakUsRUFDTjJELEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FqQixHQUdGRyxFQUFXSCxFQUFjN0MsR0FFekJQLFNBQVNVLGNBQWMsZUFBZStCLGFBS3pCYyxlQTlKUyxHQ010QmtCLEVBQVEsQ0FDWixDQUNFbEQsTUFBTyxTQUNQQyxZQUFhLGdCQUNiQyxRQUFTLGFBQ1RDLFNBQVUsTUFDVkcsUUFBUyxZQUNUZCxRQUFRLEdBRVYsQ0FDRVEsTUFBTyxTQUNQQyxZQUFhLGdCQUNiQyxRQUFTLGFBQ1RDLFNBQVUsU0FDVkcsUUFBUyxZQUNUZCxRQUFRLEdBRVYsQ0FDRVEsTUFBTyxTQUNQQyxZQUFhLGdCQUNiQyxRQUFTLGFBQ1RDLFNBQVUsT0FDVkcsUUFBUyxZQUNUZCxRQUFRLElBc0ZaLE1BQU1rQixFQUNKLFlBQVlWLEdBQ1ZtRCxLQUFLbkQsTUFBUUEsRUFJZixnQkFBZ0JvRCxFQUFLdkQsR0FDbkIsSUFBSUUsRUFRSixPQU5FQSxFQURzQixRQUFwQnFELEVBQUl2RCxHQUFHTSxTQUNELFVBQ3FCLFdBQXBCaUQsRUFBSXZELEdBQUdNLFNBQ1IsT0FFQSxTQUVISixHQUtYekIsRUFBZ0JrQyxXQW5JQyxHQW1Jb0JFLEdBQ3JDcEMsRUFBZ0I2QyxvQkFBb0IrQixFQUFPeEMsRUFBUXpCLFlBR25EOEMsRUFBYVMsY0FBY1UsRUFBT25CLEVBQWFDLGEiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFByb2plY3QgQ3JlYXRpb24gTW9kdWxlIChJSUZFKTtcclxuZXhwb3J0IGNvbnN0IHByb2plY3RDcmVhdGlvbiA9ICgoKSA9PiB7XHJcbiAgY29uc3QgcHJvamVjdEZvcm0gPSAoKSA9PiB7XHJcbiAgICAvLyBwcmV2ZW50IGZvcm0gZGVmYXVsdCBiZWhhdmlvdXJcclxuICAgIGNvbnN0IFBST0pFQ1RfRk9STSA9IGRvY3VtZW50LmZvcm1zWydwcm9qZWN0LWZvcm0nXTtcclxuXHJcbiAgICBQUk9KRUNUX0ZPUk0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGUpID0+IHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIFBST0pFQ1RfRk9STTtcclxuICB9XHJcblxyXG4gIC8vIFByb2plY3QgSGVscGVyIG1ldGhvZHNcclxuICBjb25zdCBjcmVhdGVQcm9qZWN0ID0gKHByb2plY3RBcnIsIHByb2plY3RGb3JtLCBQcm9qZWN0KSA9PiB7XHJcbiAgICBjb25zdCBQUk9KRUNUX1RJVExFID0gcHJvamVjdEZvcm0oKS5xdWVyeVNlbGVjdG9yKCcjcHJvamVjdC10aXRsZScpLnZhbHVlO1xyXG4gICAgaWYgKFBST0pFQ1RfVElUTEUgPT09ICcnKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBORVdfUFJPSkVDVCA9IG5ldyBQcm9qZWN0KFBST0pFQ1RfVElUTEUpO1xyXG4gICAgcHJvamVjdEFyci5wdXNoKE5FV19QUk9KRUNUKTtcclxuICB9O1xyXG5cclxuICBjb25zdCByZW5kZXJQcm9qZWN0VmlldyA9IChwcm9qZWN0QXJyKSA9PiB7XHJcbiAgICBjb25zdCBQUk9KRUNUX0xJU1QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcHJvamVjdC1saXN0Jyk7XHJcbiAgICBQUk9KRUNUX0xJU1QuaW5uZXJIVE1MID0gYFxyXG4gICAgICAgICAgICA8bGkgY2xhc3M9XCJsaXN0LWdyb3VwLWl0ZW0gbGlzdC1ncm91cC1pdGVtLWRhcmsgYnRuIG15LTFcIiBpZD1cInByb2plY3QtbGlzdFwiPkFsbCBQcm9qZWN0czwvbGk+XHJcbiAgICAgICAgYDtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb2plY3RBcnIubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgICAgUFJPSkVDVF9MSVNULmlubmVySFRNTCArPSBgXHJcbiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJsaXN0LWdyb3VwLWl0ZW0gbGlzdC1ncm91cC1pdGVtLWRhcmsgYnRuIG15LTFcIiBpZD1cInByb2plY3QtbGlzdFwiPiR7cHJvamVjdEFycltpXS50aXRsZX08L2xpPlxyXG4gICAgICAgICAgICBgO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIFByb2plY3QncyB0YXNrcyBIZWxwZXIgTWV0aG9kXHJcbiAgY29uc3QgdGFza09wdGlvbnMgPSAocHJvamVjdE5hbWUpID0+IHtcclxuICAgIC8vIENyZWF0ZSBzZWxlY3Rpb24gb24gdGFza3MgYmFzZWQgb24gb2JqZWN0c1xyXG4gICAgY29uc3QgVEFTS19QUk9KRUNUID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Byb2plY3QnKTtcclxuICAgIFRBU0tfUFJPSkVDVC5pbm5lckhUTUwgPSAnJztcclxuICAgIFRBU0tfUFJPSkVDVC5pbm5lckhUTUwgKz0gYFxyXG4gICAgICAgIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgdmFsdWU9XCIke3Byb2plY3ROYW1lfVwiIGlkPVwidGFzay1wcm9qZWN0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBhcmlhLWxhYmVsPVwiRGVmYXVsdCBzZWxlY3QgZXhhbXBsZVwiPlxyXG4gICAgYDtcclxuICB9O1xyXG5cclxuICBjb25zdCBwcm9qZWN0U2VsZWN0aW9uID0gKGV2ZW50LCBwcm9qZWN0TGlzdCkgPT4ge1xyXG4gICAgY29uc3QgUFJPSkVDVCA9IGV2ZW50LnRhcmdldDtcclxuXHJcbiAgICBjb25zdCBjaGlsZHJlbiA9IFsuLi5wcm9qZWN0TGlzdC5jaGlsZHJlbl07XHJcbiAgICBjaGlsZHJlbi5mb3JFYWNoKChwcm9qZWN0KSA9PiB7XHJcbiAgICAgIHByb2plY3QuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBQUk9KRUNULmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xyXG4gICAgY29uc3QgVEFTS19ESVNQTEFZID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Rhc2stZGlzcGxheScpO1xyXG4gICAgVEFTS19ESVNQTEFZLmNsYXNzTGlzdC5yZW1vdmUoJ2Qtbm9uZScpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IHJlbmRlclRhc2tzID0gKHByb2plY3ROYW1lLCB0YXNrc0FyciwgZ2V0Q29sb3IpID0+IHtcclxuICAgIGNvbnN0IFRBU0tfTElTVCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0YXNrcy1saXN0Jyk7XHJcbiAgICBUQVNLX0xJU1QuaW5uZXJIVE1MID0gJyc7XHJcbiAgICBjb25zdCBhbGxUYXNrcyA9IHRhc2tzQXJyLmZpbHRlcih0YXNrID0+IHRhc2suZXhpc3RzID09PSB0cnVlKTtcclxuICAgIGNvbnN0IEFERF9UQVNLX0JUTiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhZGQtdGFzaycpO1xyXG4gICAgY29uc3QgRk9STSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtdWx0aUNvbGxhcHNlRXhhbXBsZTInKTtcclxuXHJcbiAgICBpZiAocHJvamVjdE5hbWUgPT09ICdBbGwgUHJvamVjdHMnKSB7XHJcbiAgICAgIEFERF9UQVNLX0JUTi5jbGFzc0xpc3QuYWRkKCdkLW5vbmUnKTtcclxuICAgICAgRk9STS5jbGFzc0xpc3QuYWRkKCdkLW5vbmUnKTtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxUYXNrcy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICAgIGNvbnN0IGNvbG9yID0gZ2V0Q29sb3IoYWxsVGFza3MsIGkpO1xyXG4gICAgICAgIC8qIGVzbGludCBtYXgtbGVuOiBbXCJlcnJvclwiLCB7IFwiaWdub3JlVGVtcGxhdGVMaXRlcmFsc1wiOiB0cnVlIH1dICovXHJcbiAgICAgICAgVEFTS19MSVNULmlubmVySFRNTCArPSBgXHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwiXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tJHtjb2xvcn0gdy0xMDBcIiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1icy10b2dnbGU9XCJjb2xsYXBzZVwiIGRhdGEtYnMtdGFyZ2V0PVwiI3Rhc2stJHtpfVwiIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiIGFyaWEtY29udHJvbHM9XCJ0YXNrLSR7aX1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAke2FsbFRhc2tzW2ldLnRpdGxlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2xsYXBzZVwiIGlkPVwidGFzay0ke2l9XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLWJvZHkgYmctJHtjb2xvcn0gbWItNFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cImxpc3QtZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibGlzdC1ncm91cC1pdGVtIGJnLSR7Y29sb3J9IHRleHQtd2hpdGVcIj48c3BhbiBjbGFzcz1cImZ3LWJvbGRcIj5EZXNjcmlwdGlvbjwvc3Bhbj46ICR7YWxsVGFza3NbaV0uZGVzY3JpcHRpb259PC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibGlzdC1ncm91cC1pdGVtIGJnLSR7Y29sb3J9IHRleHQtd2hpdGVcIj48c3BhbiBjbGFzcz1cImZ3LWJvbGRcIj5EdWUgRGF0ZTwvc3Bhbj46ICR7YWxsVGFza3NbaV0uZHVlRGF0ZX08L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJsaXN0LWdyb3VwLWl0ZW0gYmctJHtjb2xvcn0gdGV4dC13aGl0ZVwiPjxzcGFuIGNsYXNzPVwiZnctYm9sZFwiPlByaW9yaXR5PC9zcGFuPjogJHthbGxUYXNrc1tpXS5wcmlvcml0eX08L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgIGA7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIEFERF9UQVNLX0JUTi5jbGFzc0xpc3QucmVtb3ZlKCdkLW5vbmUnKTtcclxuICAgICAgRk9STS5jbGFzc0xpc3QucmVtb3ZlKCdkLW5vbmUnKTtcclxuICAgICAgY29uc3QgcHJvamVjdFRhc2tzID0gdGFza3NBcnIuZmlsdGVyKHRhc2sgPT4gdGFzay5wcm9qZWN0ID09PSBwcm9qZWN0TmFtZVxyXG4gICAgICAgICAgJiYgdGFzay5leGlzdHMgPT09IHRydWUpO1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb2plY3RUYXNrcy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICAgIGNvbnN0IGNvbG9yID0gZ2V0Q29sb3IocHJvamVjdFRhc2tzLCBpKTtcclxuXHJcbiAgICAgICAgVEFTS19MSVNULmlubmVySFRNTCArPSBgXHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwiXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tJHtjb2xvcn0gdy0xMDBcIiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1icy10b2dnbGU9XCJjb2xsYXBzZVwiIGRhdGEtYnMtdGFyZ2V0PVwiI3Rhc2stJHtpfVwiIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiIGFyaWEtY29udHJvbHM9XCJ0YXNrLSR7aX1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAke3Byb2plY3RUYXNrc1tpXS50aXRsZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sbGFwc2VcIiBpZD1cInRhc2stJHtpfVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQgY2FyZC1ib2R5IGJnLSR7Y29sb3J9IG1iLTRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9XCJsaXN0LWdyb3VwIFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJsaXN0LWdyb3VwLWl0ZW0gYmctJHtjb2xvcn0gdGV4dC13aGl0ZVwiPjxzcGFuIGNsYXNzPVwiZnctYm9sZFwiPkRlc2NyaXB0aW9uPC9zcGFuPjogJHtwcm9qZWN0VGFza3NbaV0uZGVzY3JpcHRpb259PC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibGlzdC1ncm91cC1pdGVtIGJnLSR7Y29sb3J9IHRleHQtd2hpdGVcIj48c3BhbiBjbGFzcz1cImZ3LWJvbGRcIj5EdWUgRGF0ZTwvc3Bhbj46ICR7cHJvamVjdFRhc2tzW2ldLmR1ZURhdGV9PC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibGlzdC1ncm91cC1pdGVtIGJnLSR7Y29sb3J9IHRleHQtd2hpdGVcIj48c3BhbiBjbGFzcz1cImZ3LWJvbGRcIj5Qcmlvcml0eTwvc3Bhbj46ICR7cHJvamVjdFRhc2tzW2ldLnByaW9yaXR5fTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IG10LTNcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLW91dGxpbmUtZGFyayBteC0zXCI+RWRpdDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPVwiZGVsZXRlLXRhc2tcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLW91dGxpbmUtd2FybmluZ1wiPkRlbGV0ZTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICBgO1xyXG5cclxuICAgICAgICBjb25zdCBERUxFVEUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZGVsZXRlLXRhc2snKTtcclxuICAgICAgICBERUxFVEUub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgIHByb2plY3RUYXNrc1tpXS5leGlzdHMgPSBmYWxzZTtcclxuICAgICAgICAgIHJlbmRlclRhc2tzKHByb2plY3ROYW1lLCBwcm9qZWN0VGFza3MpO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBDcmVhdGUgYW5kIGRpc3BsYXkgcHJvamVjdCBpbiB0aGUgVUlcclxuICBjb25zdCBhZGRQcm9qZWN0ID0gKHByb2plY3RBcnIsIFByb2plY3QpID0+IHtcclxuICAgIGNvbnN0IFBST0pFQ1RfQlROID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Byb2plY3QtYnRuJyk7XHJcblxyXG4gICAgUFJPSkVDVF9CVE4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgIC8vUHJldmVudCBkZWZhdWx0XHJcbiAgICAgIHByb2plY3RGb3JtKCk7XHJcblxyXG4gICAgICAvLyBjcmVhdGUgbmV3IHByb2plY3RcclxuICAgICAgY3JlYXRlUHJvamVjdChwcm9qZWN0QXJyLCBwcm9qZWN0Rm9ybSwgUHJvamVjdCk7XHJcblxyXG4gICAgICAvLyBSZW5kZXIgcHJvamVjdHMgaW4gdmlld3NcclxuICAgICAgcmVuZGVyUHJvamVjdFZpZXcocHJvamVjdEFycik7XHJcblxyXG4gICAgICAvLyByZXNldCBwcm9qZWN0IGZvcm1cclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Byb2plY3QtZm9ybScpLnJlc2V0KCk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAvLyBEaXNwbGF5IHRoZSBwcm9qZWN0J3Mgc3BlY2lmaWMgdGFza3MgaW4gdGhlIFVJXHJcbiAgY29uc3QgZGlzcGxheVByb2plY3RUYXNrcyA9ICh0YXNrc0FyciwgZ2V0Q29sb3IpID0+IHtcclxuICAgIGNvbnN0IFBST0pFQ1RfTElTVCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwcm9qZWN0LWxpc3QnKTtcclxuXHJcbiAgICBQUk9KRUNUX0xJU1QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICBjb25zdCBQUk9KRUNUX05BTUUgPSBlLnRhcmdldC50ZXh0Q29udGVudDtcclxuXHJcbiAgICAgIHByb2plY3RTZWxlY3Rpb24oZSwgUFJPSkVDVF9MSVNUKTtcclxuXHJcbiAgICAgIHRhc2tPcHRpb25zKFBST0pFQ1RfTkFNRSk7XHJcblxyXG4gICAgICByZW5kZXJUYXNrcyhQUk9KRUNUX05BTUUsIHRhc2tzQXJyLCBnZXRDb2xvcik7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgYWRkUHJvamVjdCwgZGlzcGxheVByb2plY3RUYXNrcyxcclxuICB9O1xyXG59KSgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgeyBwcm9qZWN0Q3JlYXRpb24gfTsiLCIvLyBUYXNrIENyZWF0aW9uIE1vZHVsZSAoSUlGRSk7XHJcbmV4cG9ydCBjb25zdCB0YXNrQ3JlYXRpb24gPSAoKCkgPT4ge1xyXG4gIC8vIFRhc2sgRm9ybVxyXG4gIGNvbnN0IHRhc2tGb3JtID0gKCkgPT4ge1xyXG4gICAgLy8gVGFza3MgRm9ybSBJbmZvcm1hdGlvblxyXG4gICAgY29uc3QgVEFTS1NfRk9STSA9IGRvY3VtZW50LmZvcm1zWyd0YXNrcy1mb3JtJ107XHJcblxyXG4vLyBwcmV2ZW50IGZvcm0gZGVmYXVsdCBiZWhhdmlvdXJcclxuICAgIFRBU0tTX0ZPUk0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGUpID0+IHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIFRBU0tTX0ZPUk07XHJcbiAgfVxyXG5cclxuICAvLyBjcmVhdGUgdGFzayBvYmplY3RcclxuICBjb25zdCBuZXdUYXNrID0gKHRhc2tzQXJyLCBuYW1lLCBkZXNjcmlwdGlvbiwgZGF0ZSwgcHJpb3JpdHksIHByb2plY3QpID0+IHtcclxuICAgIGNvbnN0IG5ld1Rhc2sgPSBuZXcgVGFzayhuYW1lLCBkZXNjcmlwdGlvbiwgZGF0ZSwgcHJpb3JpdHksIHByb2plY3QpO1xyXG4gICAgdGFza3NBcnIucHVzaChuZXdUYXNrKTtcclxuICB9O1xyXG5cclxuICAvLyByZW5kZXIgdGFza3MgaW4gdGhlIFVJXHJcbiAgY29uc3QgcmVuZGVyVGFzayA9ICh0YXNrUHJvamVjdCwgdGFza3NBcnIpID0+IHtcclxuICAgIGNvbnN0IFRBU0tTX0xJU1QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGFza3MtbGlzdCcpO1xyXG5cclxuICAgIFRBU0tTX0xJU1QuaW5uZXJIVE1MID0gJyc7XHJcbiAgICBjb25zdCBwcm9qZWN0VGFza3MgPSB0YXNrc0Fyci5maWx0ZXIodGFzayA9PiB0YXNrLnByb2plY3QgPT09IHRhc2tQcm9qZWN0XHJcbiAgICAgICAgJiYgdGFzay5leGlzdHMgPT09IHRydWUpO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvamVjdFRhc2tzLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgIGNvbnN0IGNvbG9yID0gZ2V0Q29sb3IocHJvamVjdFRhc2tzLCBpKTtcclxuICAgICAgLyogZXNsaW50IG1heC1sZW46IFtcImVycm9yXCIsIHsgXCJpZ25vcmVUZW1wbGF0ZUxpdGVyYWxzXCI6IHRydWUgfV0gKi9cclxuICAgICAgVEFTS1NfTElTVC5pbm5lckhUTUwgKz0gYFxyXG4gICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8cD5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi0ke2NvbG9yfSB3LTEwMFwiIHR5cGU9XCJidXR0b25cIiBkYXRhLWJzLXRvZ2dsZT1cImNvbGxhcHNlXCIgZGF0YS1icy10YXJnZXQ9XCIjdGFzay0ke2l9XCIgYXJpYS1leHBhbmRlZD1cImZhbHNlXCIgYXJpYS1jb250cm9scz1cInRhc2stJHtpfVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAke3Byb2plY3RUYXNrc1tpXS50aXRsZX1cclxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2xsYXBzZVwiIGlkPVwidGFzay0ke2l9XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQgY2FyZC1ib2R5IGJnLSR7Y29sb3J9IG1iLTRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwibGlzdC1ncm91cCBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImxpc3QtZ3JvdXAtaXRlbSBiZy0ke2NvbG9yfSB0ZXh0LXdoaXRlXCI+PHNwYW4gY2xhc3M9XCJmdy1ib2xkXCI+RGVzY3JpcHRpb248L3NwYW4+OiAke3Byb2plY3RUYXNrc1tpXS5kZXNjcmlwdGlvbn08L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibGlzdC1ncm91cC1pdGVtIGJnLSR7Y29sb3J9IHRleHQtd2hpdGVcIj48c3BhbiBjbGFzcz1cImZ3LWJvbGRcIj5EdWUgRGF0ZTwvc3Bhbj46ICR7cHJvamVjdFRhc2tzW2ldLmR1ZURhdGV9PC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImxpc3QtZ3JvdXAtaXRlbSBiZy0ke2NvbG9yfSB0ZXh0LXdoaXRlXCI+PHNwYW4gY2xhc3M9XCJmdy1ib2xkXCI+UHJpb3JpdHk8L3NwYW4+OiAke3Byb2plY3RUYXNrc1tpXS5wcmlvcml0eX08L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IG10LTMganVzdGlmeS1jb250ZW50LWJldHdlZW5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLSR7YnV0dG9uQ29sb3IoY29sb3IpWzBdfVwiIHR5cGU9XCJidXR0b25cIiBkYXRhLWJzLXRvZ2dsZT1cImNvbGxhcHNlXCIgZGF0YS1icy10YXJnZXQ9XCIjY29sbGFwc2VFeGFtcGxlLSR7aX1cIiBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIiBhcmlhLWNvbnRyb2xzPVwiY29sbGFwc2VFeGFtcGxlLSR7aX1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVkaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPVwiZGVsZXRlLWJ0bi0ke2l9XCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi0ke2J1dHRvbkNvbG9yKGNvbG9yKVsxXX1cIj5EZWxldGU8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2xsYXBzZSBtdWx0aS1jb2xsYXBzZVwiIGlkPVwiY29sbGFwc2VFeGFtcGxlLSR7aX1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gaWQ9XCJlZGl0LXRhc2tzLWZvcm1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtYi0zXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImVkaXQtdGFzay1uYW1lXCIgY2xhc3M9XCJmb3JtLWxhYmVsIHRleHQtaW5mb1wiPlRhc2sgVGl0bGU8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgaWQ9XCJlZGl0LXRhc2stbmFtZS0ke2l9XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWItM1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJlZGl0LXRhc2stZGVzY3JpcHRpb25cIiBjbGFzcz1cImZvcm0tbGFiZWwgdGV4dC1pbmZvXCI+VGFzayBEZXNjcmlwdGlvbjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBpZD1cImVkaXQtdGFzay1kZXNjcmlwdGlvbi0ke2l9XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWItM1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJlZGl0LXRhc2stZGF0ZVwiIGNsYXNzPVwiZm9ybS1sYWJlbCB0ZXh0LWluZm9cIj5EdWUgRGF0ZTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiZGF0ZVwiIGlkPVwiZWRpdC10YXNrLWRhdGUtJHtpfVwiIG5hbWU9XCJ0cmlwLXN0YXJ0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWItM1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJlZGl0LXRhc2stcHJpb3JpdHlcIiBjbGFzcz1cImZvcm0tbGFiZWwgdGV4dC1pbmZvXCI+UHJpb3JpdHk8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9XCJlZGl0LXRhc2stcHJpb3JpdHktJHtpfVwiIGNsYXNzPVwiZm9ybS1zZWxlY3RcIiBhcmlhLWxhYmVsPVwiRGVmYXVsdCBzZWxlY3QgZXhhbXBsZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHNlbGVjdGVkPlNlbGVjdCBQcmlvcml0eTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwibG93XCI+TG93PC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJtZWRpdW1cIj5NZWRpdW08L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImhpZ2hcIj5IaWdoPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD1cImVkaXQtYnRuLSR7aX1cIiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJidG4gYnRuLXNlY29uZGFyeVwiPkVkaXQgVGFzazwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgIGA7XHJcblxyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjZWRpdC10YXNrLW5hbWUtJHtpfWApLnNldEF0dHJpYnV0ZSgndmFsdWUnLCBwcm9qZWN0VGFza3NbaV0udGl0bGUpO1xyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjZWRpdC10YXNrLWRlc2NyaXB0aW9uLSR7aX1gKS5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgcHJvamVjdFRhc2tzW2ldLmRlc2NyaXB0aW9uKTtcclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI2VkaXQtdGFzay1kYXRlLSR7aX1gKS5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgcHJvamVjdFRhc2tzW2ldLmR1ZURhdGUpO1xyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjZWRpdC10YXNrLXByaW9yaXR5LSR7aX1gKVxyXG4gICAgICAgIC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgcHJvamVjdFRhc2tzW2ldLnByaW9yaXR5KTtcclxuXHJcbiAgICAgIFRhc2suZGVsZXRlVGFzayhwcm9qZWN0VGFza3MsXHJcbiAgICAgICAgdGFza1Byb2plY3QsXHJcbiAgICAgICAgaSxcclxuICAgICAgICBUQVNLU19MSVNULFxyXG4gICAgICAgIHRhc2tDcmVhdGlvbi5yZW5kZXJUYXNrKTtcclxuXHJcbiAgICAgIFRhc2suZWRpdFRhc2socHJvamVjdFRhc2tzLFxyXG4gICAgICAgIHRhc2tQcm9qZWN0LFxyXG4gICAgICAgIGksXHJcbiAgICAgICAgVEFTS1NfTElTVCxcclxuICAgICAgICB0YXNrQ3JlYXRpb24ucmVuZGVyVGFzayk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gY3JlYXRlIHRhc2sgYW5kIGRpc3BsYXkgaXQgb24gdGhlIFVJXHJcbiAgY29uc3QgY3JlYXRlTmV3VGFzayA9ICh0YXNrc0FyciwgdGFza0Zvcm0pID0+IHtcclxuICAgIGNvbnN0IFRBU0tTX0ZPUk0gPSB0YXNrRm9ybSgpO1xyXG4gICAgY29uc3QgVEFTS19CVE4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGFzay1idG4nKTtcclxuICAgIFRBU0tfQlROLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBUQVNLX05BTUUgPSBUQVNLU19GT1JNLnF1ZXJ5U2VsZWN0b3IoJyN0YXNrLW5hbWUnKS52YWx1ZTtcclxuICAgICAgY29uc3QgVEFTS19ERVNDUklQVElPTiA9IFRBU0tTX0ZPUk1cclxuICAgICAgICAucXVlcnlTZWxlY3RvcignI3Rhc2stZGVzY3JpcHRpb24nKVxyXG4gICAgICAgIC52YWx1ZTtcclxuICAgICAgY29uc3QgVEFTS19EQVRFID0gVEFTS1NfRk9STS5xdWVyeVNlbGVjdG9yKCcjdGFzay1kYXRlJykudmFsdWU7XHJcbiAgICAgIGNvbnN0IFRBU0tfUFJJT1JJVFkgPSBUQVNLU19GT1JNLnF1ZXJ5U2VsZWN0b3IoJyN0YXNrLXByaW9yaXR5JykudmFsdWU7XHJcbiAgICAgIGNvbnN0IFRBU0tfUFJPSkVDVCA9IFRBU0tTX0ZPUk0ucXVlcnlTZWxlY3RvcignI3Rhc2stcHJvamVjdCcpLnZhbHVlO1xyXG5cclxuICAgICAgaWYgKFRBU0tfTkFNRSA9PT0gJycpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgaWYgKFRBU0tfREVTQ1JJUFRJT04gPT09ICcnKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChUQVNLX0RBVEUgPT09ICcnKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChUQVNLX1BSSU9SSVRZID09PSAnJykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gY3JlYXRlIG5ldyB0YXNrIGluc3RhbmNlXHJcbiAgICAgIG5ld1Rhc2sodGFza3NBcnIsXHJcbiAgICAgICAgVEFTS19OQU1FLFxyXG4gICAgICAgIFRBU0tfREVTQ1JJUFRJT04sXHJcbiAgICAgICAgVEFTS19EQVRFLFxyXG4gICAgICAgIFRBU0tfUFJJT1JJVFksXHJcbiAgICAgICAgVEFTS19QUk9KRUNUKTtcclxuXHJcbiAgICAgIC8vIHJlbmRlciB0YXNrIHRvIHRoZSBVSVxyXG4gICAgICByZW5kZXJUYXNrKFRBU0tfUFJPSkVDVCwgdGFza3NBcnIpO1xyXG5cclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Rhc2tzLWZvcm0nKS5yZXNldCgpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGNyZWF0ZU5ld1Rhc2ssIHJlbmRlclRhc2ssXHJcbiAgfTtcclxufSkoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHsgdGFza0NyZWF0aW9uIH07IiwiLy8gTWV0aG9kIGltcG9ydHNcclxuaW1wb3J0IHsgcHJvamVjdENyZWF0aW9uIH0gZnJvbSAnLi9wcm9qZWN0RG9tJztcclxuaW1wb3J0IHsgdGFza0NyZWF0aW9uIH0gZnJvbSAnLi90YXNrRG9tJztcclxuXHJcbi8vIE9iamVjdCdzIGFycmF5c1xyXG5jb25zdCBwcm9qZWN0cyA9IFtdO1xyXG5cclxuY29uc3QgdGFza3MgPSBbXHJcbiAge1xyXG4gICAgdGl0bGU6ICdUYXNrIDEnLFxyXG4gICAgZGVzY3JpcHRpb246ICdEZXNjcmlwdGlvbiAxJyxcclxuICAgIGR1ZURhdGU6ICcyMDIxLTA2LTEwJyxcclxuICAgIHByaW9yaXR5OiAnbG93JyxcclxuICAgIHByb2plY3Q6ICdQcm9qZWN0IDEnLFxyXG4gICAgZXhpc3RzOiB0cnVlLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgdGl0bGU6ICdUYXNrIDInLFxyXG4gICAgZGVzY3JpcHRpb246ICdEZXNjcmlwdGlvbiAyJyxcclxuICAgIGR1ZURhdGU6ICcyMDIxLTA2LTEwJyxcclxuICAgIHByaW9yaXR5OiAnbWVkaXVtJyxcclxuICAgIHByb2plY3Q6ICdQcm9qZWN0IDInLFxyXG4gICAgZXhpc3RzOiB0cnVlLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgdGl0bGU6ICdUYXNrIDMnLFxyXG4gICAgZGVzY3JpcHRpb246ICdEZXNjcmlwdGlvbiAzJyxcclxuICAgIGR1ZURhdGU6ICcyMDIxLTA2LTEwJyxcclxuICAgIHByaW9yaXR5OiAnaGlnaCcsXHJcbiAgICBwcm9qZWN0OiAnUHJvamVjdCAzJyxcclxuICAgIGV4aXN0czogdHJ1ZSxcclxuICB9LFxyXG5dO1xyXG5cclxuLy8gQ2xhc3MgQ29uc3RydWN0b3JcclxuXHJcbmNsYXNzIFRhc2sge1xyXG4gIGNvbnN0cnVjdG9yKHRpdGxlLCBkZXNjcmlwdGlvbiwgZHVlRGF0ZSwgcHJpb3JpdHksIHByb2plY3QgPSAnZGVmYXVsdCcpIHtcclxuICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcclxuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcclxuICAgIHRoaXMuZHVlRGF0ZSA9IGR1ZURhdGU7XHJcbiAgICB0aGlzLnByaW9yaXR5ID0gcHJpb3JpdHk7XHJcbiAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xyXG4gICAgdGhpcy5leGlzdHMgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLy8gVUkgY29sb3IgbG9naWNcclxuICBzdGF0aWMgZ2V0Q29sb3IoYXJyLCBpKSB7XHJcbiAgICBsZXQgY29sb3I7XHJcbiAgICBpZiAoYXJyW2ldLnByaW9yaXR5ID09PSAnbG93Jykge1xyXG4gICAgICBjb2xvciA9ICdzdWNjZXNzJztcclxuICAgIH0gZWxzZSBpZiAoYXJyW2ldLnByaW9yaXR5ID09PSAnbWVkaXVtJykge1xyXG4gICAgICBjb2xvciA9ICdpbmZvJztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbG9yID0gJ2Rhbmdlcic7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29sb3I7XHJcbiAgfTtcclxuXHJcbiAgLy8gYnV0dG9uIGxvZ2ljIGZvciB0YXNrcyBlZGl0L2RlbGV0ZVxyXG4gIHN0YXRpYyBidXR0b25Db2xvcihjb2xvcikge1xyXG4gICAgbGV0IGJ0bkVkaXQ7XHJcbiAgICBsZXQgYnRuRGVsZXRlO1xyXG4gICAgaWYgKGNvbG9yID09PSAnc3VjY2VzcycgfHwgY29sb3IgPT09ICdpbmZvJykge1xyXG4gICAgICBidG5FZGl0ID0gJ3dhcm5pbmcnO1xyXG4gICAgICBidG5EZWxldGUgPSAnZGFuZ2VyJztcclxuICAgIH1cclxuICAgIGlmIChjb2xvciA9PT0gJ2RhbmdlcicpIHtcclxuICAgICAgYnRuRWRpdCA9ICdwcmltYXJ5JztcclxuICAgICAgYnRuRGVsZXRlID0gJ3dhcm5pbmcnO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFtidG5FZGl0LCBidG5EZWxldGVdO1xyXG4gIH07XHJcblxyXG4gIC8vIEVkaXQvRGVsZXRlIFRhc2tzIG1ldGhvZHNcclxuICBzdGF0aWMgZGVsZXRlVGFzayhwcm9qZWN0VGFza3MsIHRhc2tQcm9qZWN0LCBpLCBUQVNLU19MSVNULCByZW5kZXJUYXNrKSB7XHJcbiAgICBUQVNLU19MSVNULmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgaWYgKGUudGFyZ2V0LmlkID09PSBgZGVsZXRlLWJ0bi0ke2l9YCkge1xyXG4gICAgICAgIHByb2plY3RUYXNrc1tpXS5leGlzdHMgPSBmYWxzZTtcclxuICAgICAgICByZW5kZXJUYXNrKHRhc2tQcm9qZWN0LCBwcm9qZWN0VGFza3MpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBlZGl0VGFzayhwcm9qZWN0VGFza3MsIHRhc2tQcm9qZWN0LCBpLCBUQVNLU19MSVNULCByZW5kZXJUYXNrKSB7XHJcbiAgICBUQVNLU19MSVNULmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgaWYgKGUudGFyZ2V0LmlkID09PSBgZWRpdC1idG4tJHtpfWApIHtcclxuICAgICAgICBjb25zdCBFRElUX05BTUUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjZWRpdC10YXNrLW5hbWUtJHtpfWApLnZhbHVlO1xyXG4gICAgICAgIGNvbnN0IEVESVRfREVTQyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNlZGl0LXRhc2stZGVzY3JpcHRpb24tJHtpfWApLnZhbHVlO1xyXG4gICAgICAgIGNvbnN0IEVESVRfREFURSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNlZGl0LXRhc2stZGF0ZS0ke2l9YCkudmFsdWU7XHJcbiAgICAgICAgY29uc3QgRURJVF9QUklPUiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNlZGl0LXRhc2stcHJpb3JpdHktJHtpfWApLnZhbHVlO1xyXG5cclxuICAgICAgICBpZiAoRURJVF9OQU1FID09PSAnJykge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoRURJVF9ERVNDID09PSAnJykge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoRURJVF9EQVRFID09PSAnJykge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoRURJVF9QUklPUiA9PT0gJycpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb2plY3RUYXNrc1tpXS50aXRsZSA9IEVESVRfTkFNRTtcclxuICAgICAgICBwcm9qZWN0VGFza3NbaV0uZGVzY3JpcHRpb24gPSBFRElUX0RFU0M7XHJcbiAgICAgICAgcHJvamVjdFRhc2tzW2ldLmR1ZURhdGUgPSBFRElUX0RBVEU7XHJcbiAgICAgICAgcHJvamVjdFRhc2tzW2ldLnByaW9yaXR5ID0gRURJVF9QUklPUjtcclxuXHJcbiAgICAgICAgcmVuZGVyVGFzayh0YXNrUHJvamVjdCwgcHJvamVjdFRhc2tzKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5jbGFzcyBQcm9qZWN0IHtcclxuICBjb25zdHJ1Y3Rvcih0aXRsZSkge1xyXG4gICAgdGhpcy50aXRsZSA9IHRpdGxlO1xyXG4gIH1cclxuXHJcbiAgLy8gQXNzaWduIGNvbG9yIHZhcmlhYmxlIHRvIHVzZSBpbiBET01cclxuICBzdGF0aWMgZ2V0Q29sb3IoYXJyLCBpKSB7XHJcbiAgICBsZXQgY29sb3I7XHJcbiAgICBpZiAoYXJyW2ldLnByaW9yaXR5ID09PSAnbG93Jykge1xyXG4gICAgICBjb2xvciA9ICdzdWNjZXNzJztcclxuICAgIH0gZWxzZSBpZiAoYXJyW2ldLnByaW9yaXR5ID09PSAnbWVkaXVtJykge1xyXG4gICAgICBjb2xvciA9ICdpbmZvJztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbG9yID0gJ2Rhbmdlcic7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29sb3I7XHJcbiAgfTtcclxufVxyXG5cclxuLy8gQ2FsbCBvZiBwcm9qZWN0J3MgZnVuY3Rpb24gd2l0aCBhdHRhY2hlZCBldmVudCBsaXN0ZW5lcnNcclxucHJvamVjdENyZWF0aW9uLmFkZFByb2plY3QocHJvamVjdHMsIFByb2plY3QpO1xyXG5wcm9qZWN0Q3JlYXRpb24uZGlzcGxheVByb2plY3RUYXNrcyh0YXNrcywgUHJvamVjdC5nZXRDb2xvcigpKTtcclxuXHJcbi8vIENhbGwgdGFza3MgZnVuY3Rpb25zIHdpdGggYXR0YWNoZWQgZXZlbnQgbGlzdGVuZXJzXHJcbnRhc2tDcmVhdGlvbi5jcmVhdGVOZXdUYXNrKHRhc2tzLCB0YXNrQ3JlYXRpb24ucmVuZGVyVGFzayk7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=