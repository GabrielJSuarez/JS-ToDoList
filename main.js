(()=>{"use strict";class t{constructor(t){this.title=t}}const e=document.forms["project-form"];e.addEventListener("submit",(t=>{t.preventDefault()}));const n=(()=>{const n=(t,e)=>{const s=document.querySelector("#tasks-list");s.innerHTML="";let l=e.filter((t=>!0===t.exists));const a=document.querySelector("#add-task"),o=document.querySelector("#multiCollapseExample2");if("All Projects"===t){a.classList.add("d-none"),o.classList.add("d-none");for(let t=0;t<l.length;t++){let e=i(l,t);s.innerHTML+=`\n                    <li class="">\n                        <p>\n                            <button class="btn btn-${e} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${t}" aria-expanded="false" aria-controls="task-${t}">\n                                ${l[t].title}\n                            </button>\n                        </p>\n                        \n                        <div class="collapse" id="task-${t}">\n                            <div class="card card-body bg-${e} mb-4">\n                                <ul class="list-group">\n                                    <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Description</span>: ${l[t].description}</li>\n                                    <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Due Date</span>: ${l[t].dueDate}</li>\n                                    <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Priority</span>: ${l[t].priority}</li>\n                                </ul>\n                            </div>\n                        </div>\n                    </li>\n                `}}else{a.classList.remove("d-none"),o.classList.remove("d-none");let l=e.filter((e=>e.project===t&&!0===e.exists));for(let e=0;e<l.length;e++){let a=i(l,e);s.innerHTML+=`\n                    <li>\n                        <p>\n                            <button class="btn btn-${a} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${e}" aria-expanded="false" aria-controls="task-${e}">\n                            ${l[e].title}\n                            </button>\n                        </p>\n                            \n                        <div class="collapse" id="task-${e}">\n                            <div class="card card-body bg-${a} mb-4">\n                                <ul class="list-group ">\n                                    <li class="list-group-item bg-${a} text-white"><span class="fw-bold">Description</span>: ${l[e].description}</li>\n                                    <li class="list-group-item bg-${a} text-white"><span class="fw-bold">Due Date</span>: ${l[e].dueDate}</li>\n                                    <li class="list-group-item bg-${a} text-white"><span class="fw-bold">Priority</span>: ${l[e].priority}</li>\n                                </ul>\n                            \n                                <div class="d-flex mt-3 justify-content-between">\n                                    <div>\n                                        <p>\n                                            <button class="btn btn-${buttonColor(a)[0]}" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample-${e}" aria-expanded="false" aria-controls="collapseExample-${e}">\n                                                Edit\n                                            </button>\n\n                                            <button id="delete-btn-${e}" type="button" class="btn btn-${buttonColor(a)[1]}">Delete</button>\n                                        </p>\n                                        \n                                        <div class="collapse multi-collapse" id="collapseExample-${e}">\n                                            <form id="edit-tasks-form">\n                                                <div class="mb-3">\n                                                    <label for="edit-task-name" class="form-label text-info">Task Title</label>\n                                                    <input type="text" class="form-control" id="edit-task-name-${e}">\n                                                </div>\n                                \n                                                <div class="mb-3">\n                                                    <label for="edit-task-description" class="form-label text-info">Task Description</label>\n                                                    <input type="text" class="form-control" id="edit-task-description-${e}">\n                                                </div>\n                                \n                                                <div class="mb-3">\n                                                    <label for="edit-task-date" class="form-label text-info">Due Date</label>\n                                                    <br>\n                                                    <input type="date" id="edit-task-date-${e}" name="trip-start">\n                                                </div>\n                                \n                                                <div class="mb-3">\n                                                    <label for="edit-task-priority" class="form-label text-info">Priority</label>\n                                                    <select id="edit-task-priority-${e}" class="form-select" aria-label="Default select example">\n                                                        <option selected>Select Priority</option>\n                                                        <option value="low">Low</option>\n                                                        <option value="medium">Medium</option>\n                                                        <option value="high">High</option>\n                                                    </select>\n                                                </div>\n                                                <div>\n                                                    <button id="edit-btn-${e}" type="submit" class="btn btn-secondary">Edit Task</button>\n                                                </div\n                                            </form>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </li>\n                `,document.querySelector("#delete-task").onclick=()=>{l[e].exists=!1,n(t,l)}}}},i=(t,e)=>{let n;return n="low"===t[e].priority?"success":"medium"===t[e].priority?"info":"danger",n};return{addProject:n=>{document.querySelector("#project-btn").addEventListener("click",(()=>{(n=>{const i=e.querySelector("#project-title").value;if(""===i)return;const s=new t(i);n.push(s)})(n),(t=>{const e=document.querySelector("#project-list");e.innerHTML='\n            <li class="list-group-item list-group-item-dark btn my-1" id="project-list">All Projects</li>\n        ';for(let n=0;n<t.length;n++)e.innerHTML+=`\n                <li class="list-group-item list-group-item-dark btn my-1" id="project-list">${t[n].title}</li>\n            `})(n),document.querySelector("#project-form")}))},displayProjectTasks:t=>{const e=document.querySelector("#project-list");e.addEventListener("click",(i=>{const s=i.target.textContent;((t,e)=>{const n=t.target;[...e.children].forEach((function(t){t.classList.remove("active")})),n.classList.add("active"),document.querySelector("#task-display").classList.remove("d-none")})(i,e),(t=>{const e=document.querySelector("#project");e.innerHTML="",e.innerHTML+=`\n        <input type="hidden" value="${t}" id="task-project" class="form-control" aria-label="Default select example">\n    `})(s),n(s,t)}))}}})();class i{constructor(t,e,n,i,s="default"){this.title=t,this.description=e,this.dueDate=n,this.priority=i,this.project=s,this.exists=!0}}const s=document.forms["tasks-form"];s.addEventListener("submit",(t=>{t.preventDefault()}));const l=(()=>{const t=(t,i)=>{const s=document.querySelector("#tasks-list");s.innerHTML="";let o=i.filter((e=>e.project===t&&!0===e.exists));for(let i=0;i<o.length;i++){let r=e(o,i);s.innerHTML+=`\n            <li>\n                <p>\n                    <button class="btn btn-${r} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${i}" aria-expanded="false" aria-controls="task-${i}">\n                        ${o[i].title}\n                    </button>\n                </p>\n                    \n                <div class="collapse" id="task-${i}">\n                    <div class="card card-body bg-${r} mb-4">\n                        <ul class="list-group ">\n                            <li class="list-group-item bg-${r} text-white"><span class="fw-bold">Description</span>: ${o[i].description}</li>\n                            <li class="list-group-item bg-${r} text-white"><span class="fw-bold">Due Date</span>: ${o[i].dueDate}</li>\n                            <li class="list-group-item bg-${r} text-white"><span class="fw-bold">Priority</span>: ${o[i].priority}</li>\n                        </ul>\n                    \n                        <div class="d-flex mt-3 justify-content-between">\n                            <div>\n                                <p>\n                                    <button class="btn btn-${n(r)[0]}" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample-${i}" aria-expanded="false" aria-controls="collapseExample-${i}">\n                                        Edit\n                                    </button>\n\n                                    <button id="delete-btn-${i}" type="button" class="btn btn-${n(r)[1]}">Delete</button>\n                                </p>\n\n                                <div class="collapse multi-collapse" id="collapseExample-${i}">\n                                    <form id="edit-tasks-form">\n                                        <div class="mb-3">\n                                            <label for="edit-task-name" class="form-label text-info">Task Title</label>\n                                            <input type="text" class="form-control" id="edit-task-name-${i}">\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-description" class="form-label text-info">Task Description</label>\n                                            <input type="text" class="form-control" id="edit-task-description-${i}">\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-date" class="form-label text-info">Due Date</label>\n                                            <br>\n                                            <input type="date" id="edit-task-date-${i}" name="trip-start">\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-priority" class="form-label text-info">Priority</label>\n                                            <select id="edit-task-priority-${i}" class="form-select" aria-label="Default select example">\n                                                <option selected>Select Priority</option>\n                                                <option value="low">Low</option>\n                                                <option value="medium">Medium</option>\n                                                <option value="high">High</option>\n                                            </select>\n                                        </div>\n                                        <div>\n                                            <button id="edit-btn-${i}" type="submit" class="btn btn-secondary">Edit Task</button>\n                                        </div\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </li>\n            `,document.querySelector(`#edit-task-name-${i}`).setAttribute("value",o[i].title),document.querySelector(`#edit-task-description-${i}`).setAttribute("value",o[i].description),document.querySelector(`#edit-task-date-${i}`).setAttribute("value",o[i].dueDate),document.querySelector(`#edit-task-priority-${i}`).setAttribute("value",o[i].priority),l(o,t,i,s),a(o,t,i,s)}},e=(t,e)=>{let n;return n="low"===t[e].priority?"success":"medium"===t[e].priority?"info":"danger",n},n=t=>{let e,n;return e="warning",n="danger","danger"===t&&(e="primary",n="warning"),[e,n]},l=(e,n,i,s)=>{s.addEventListener("click",(s=>{s.target.id===`delete-btn-${i}`&&(e[i].exists=!1,t(n,e))}))},a=(e,n,i,s)=>{s.addEventListener("click",(s=>{if(s.target.id===`edit-btn-${i}`){const s=document.querySelector(`#edit-task-name-${i}`).value,l=document.querySelector(`#edit-task-description-${i}`).value,a=document.querySelector(`#edit-task-date-${i}`).value,o=document.querySelector(`#edit-task-priority-${i}`).value;if(""===s)return;if(""===l)return;if(""===a)return;if(""===o)return;e[i].title=s,e[i].description=l,e[i].dueDate=a,e[i].priority=o,t(n,e)}}))};return{createNewTask:e=>{document.querySelector("#task-btn").addEventListener("click",(()=>{const n=s.querySelector("#task-name").value,l=s.querySelector("#task-description").value,a=s.querySelector("#task-date").value,o=s.querySelector("#task-priority").value,r=s.querySelector("#task-project").value;""!==n&&""!==l&&""!==a&&""!==o&&(((t,e,n,s,l,a)=>{const o=new i(e,n,s,l,a);t.push(o)})(e,n,l,a,o,r),t(r,e),document.querySelector("#tasks-form"))}))},deleteTask:l,editTask:a}})(),a=[{title:"Task 1",description:"Description 1",dueDate:"2021-06-10",priority:"low",project:"Project 1",exists:!0},{title:"Task 2",description:"Description 2",dueDate:"2021-06-10",priority:"medium",project:"Project 2",exists:!0},{title:"Task 3",description:"Description 3",dueDate:"2021-06-10",priority:"high",project:"Project 3",exists:!0}];n.addProject([],a),n.displayProjectTasks(a),l.createNewTask(a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,