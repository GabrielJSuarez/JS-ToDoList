(()=>{"use strict";var t={d:(e,s)=>{for(var n in s)t.o(s,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:s[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};t.d({},{I:()=>l,i:()=>a});const e=(()=>{const t=()=>{const t=document.forms["tasks-form"];return t.addEventListener("submit",(t=>{t.preventDefault()})),t},s=(t,s,n,i,a)=>{a.addEventListener("click",(a=>{a.target.id===`${t}-delete-btn-${i}`&&(s[i].exists=!1,localStorage.setItem("tasks",JSON.stringify(s)),e.renderTasks(n,s))}))},n=(t,e)=>{const n=document.querySelector("#tasks-list");n.innerHTML="";const i=document.querySelector("#add-task"),l=document.querySelector("#multiCollapseExample2"),o=t.split(" ").join("-");if("All Projects"===t){i.classList.add("d-none"),l.classList.add("d-none");for(let t=0;t<e.length;t+=1){const s=a.getColor(e,t);n.innerHTML+=`\n                    <li class="">\n                        <p>\n                            <button class="btn btn-${s} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${t}" aria-expanded="false" aria-controls="task-${t}">\n                                ${e[t].title}\n                            </button>\n                        </p>\n                        \n                        <div class="collapse" id="task-${t}">\n                            <div class="card card-body bg-${s} mb-4">\n                                <ul class="list-group">\n                                    <li class="list-group-item bg-${s} text-white"><span class="fw-bold">Description</span>: ${e[t].description}</li>\n                                    <li class="list-group-item bg-${s} text-white"><span class="fw-bold">Due Date</span>: ${e[t].dueDate}</li>\n                                    <li class="list-group-item bg-${s} text-white"><span class="fw-bold">Priority</span>: ${e[t].priority}</li>\n                                </ul>\n                            </div>\n                        </div>\n                    </li>\n                `}}else{i.classList.remove("d-none"),l.classList.remove("d-none"),n.innerHTML="";const r=e.filter((e=>e.project===t&&!0===e.exist));for(let i=0;i<r.length;i+=1){const l=a.getColor(r,i);n.innerHTML+=`\n            <li>\n                <p>\n                    <button class="btn btn-${l} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${i}" aria-expanded="false" aria-controls="task-${i}">\n                        ${r[i].title}\n                    </button>\n                </p>\n                    \n                <div class="collapse" id="task-${i}">\n                    <div class="card card-body bg-${l} mb-4">\n                        <ul class="list-group ">\n                            <li class="list-group-item bg-${l} text-white"><span class="fw-bold">Description</span>: ${r[i].description}</li>\n                            <li class="list-group-item bg-${l} text-white"><span class="fw-bold">Due Date</span>: ${r[i].dueDate}</li>\n                            <li class="list-group-item bg-${l} text-white"><span class="fw-bold">Priority</span>: ${r[i].priority}</li>\n                        </ul>\n                    \n                        <div class="d-flex mt-3 justify-content-between">\n                            <div>\n                                <p>\n                                    <button class="btn btn-${a.buttonColor(l)[0]}" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample-${i}" aria-expanded="false" aria-controls="collapseExample-${i}">\n                                        Edit\n                                    </button>\n\n                                    <button id="${o}-delete-btn-${i}" type="button" class="btn btn-${a.buttonColor(l)[1]}">Delete</button>\n                                </p>\n                                \n                                <div class="collapse multi-collapse" id="collapseExample-${i}">\n                                    <form id="edit-tasks-form">\n                                        <div class="mb-3">\n                                            <label for="edit-task-name-${i}" class="form-label text-info">Task Title</label>\n                                            <input type="text" class="form-control" id="edit-task-name-${i}" required>\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-description-${i}" class="form-label text-info">Task Description</label>\n                                            <input type="text" class="form-control" id="edit-task-description-${i}" required>\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-date-${i}" class="form-label text-info">Due Date</label>\n                                            <br>\n                                            <input type="date" id="edit-task-date-${i}" name="trip-start" required>\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-priority-${i}" class="form-label text-info">Priority</label>\n                                            <select id="edit-task-priority-${i}" class="form-select" aria-label="Default select example" required>\n                                                <option selected>Select Priority</option>\n                                                <option value="low">Low</option>\n                                                <option value="medium">Medium</option>\n                                                <option value="high">High</option>\n                                            </select>\n                                        </div>\n                                        \n                                        <div>\n                                            <button id="edit-btn-${i}" type="submit" class="btn btn-secondary">Edit Task</button>\n                                        </div\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </li>\n            `,document.querySelector(`#edit-task-name-${i}`).setAttribute("value",r[i].title),document.querySelector(`#edit-task-description-${i}`).setAttribute("value",r[i].description),document.querySelector(`#edit-task-date-${i}`).setAttribute("value",r[i].dueDate),s(o,e,t,i,n),console.log(e)}}};return{createNewTask:e=>{const s=t();document.querySelector("#task-btn").addEventListener("click",(()=>{const i=s.querySelector("#task-name").value,l=s.querySelector("#task-description").value,o=s.querySelector("#task-date").value,r=s.querySelector("#task-priority").value,c=s.querySelector("#task-project").value;""!==i&&""!==l&&""!==o&&""!==r&&(a.newTask(e,i,l,o,r,c),localStorage.setItem("tasks",JSON.stringify(e)),t(),n(c,e))}))},renderTasks:n,deleteTask:s}})(),s=(()=>{const t=()=>{const t=document.forms["project-form"];return t.addEventListener("submit",(t=>{t.preventDefault()})),t},s=t=>{const e=document.querySelector("#project-list");e.innerHTML='\n            <li class="list-group-item list-group-item-dark btn my-1" id="all-projects">All Projects</li>\n        ';for(let s=0;s<t.length;s+=1)e.innerHTML+=`\n                <li class="list-group-item list-group-item-dark btn my-1" id="project-list">${t[s].title}</li>\n            `};return{addProject:e=>{document.querySelector("#project-btn").addEventListener("click",(()=>{t(),((t,e)=>{const s=e().querySelector("#project-title").value;""!==s&&(l.newProject(s,t),localStorage.setItem("projects",JSON.stringify(t)))})(e,t),s(e),document.querySelector("#project-form").reset()}))},displayProjectTasks:(t,s)=>{const n=document.querySelector("#project-list");n.addEventListener("click",(i=>{const a=i.target.textContent;((t,e)=>{const s=t.target;[...e.children].forEach((t=>{t.classList.remove("active")})),s.classList.add("active"),document.querySelector("#task-display").classList.remove("d-none")})(i,n),(t=>{const e=document.querySelector("#project");e.innerHTML="",e.innerHTML+=`\n        <input type="hidden" value="${t}" id="task-project" class="form-control" aria-label="Default select example">\n    `})(a),e.renderTasks(a,t,s)}))},renderProjectView:s}})();let n=JSON.parse(localStorage.getItem("projects"))||[];const i=JSON.parse(localStorage.getItem("tasks"))||[];class a{constructor(t,e,s,n,i="default"){this.title=t,this.description=e,this.dueDate=s,this.priority=n,this.project=i,this.exist=!0}static newTask(t,e,s,n,i,l){const o=new a(e,s,n,i,l);t.push(o)}static editTask(t,e,s,n){const i=document.forms["edit-tasks-form"];document.querySelector(`#edit-btn-${s}`).addEventListener("click",(()=>{const a=i.querySelector(`#edit-task-name-${s}`).value,l=i.querySelector(`#edit-task-description-${s}`).value,o=i.querySelector(`#edit-task-date-${s}`).value,r=i.querySelector(`#edit-task-priority-${s}`).value;""!==a&&""!==l&&""!==o&&""!==r&&(t[s].title=a,t[s].description=l,t[s].date=o,t[s].priority=r,n(e,t))}))}static getColor(t,e){let s;return s="low"===t[e].priority?"success":"medium"===t[e].priority?"info":"danger",s}static buttonColor(t){let e,s;return"success"!==t&&"info"!==t||(e="warning",s="danger"),"danger"===t&&(e="primary",s="warning"),[e,s]}}class l{constructor(t){this.title=t}static newProject(t,e){const s=new l(t);e.push(s)}}s.renderProjectView(n),s.addProject(n),s.displayProjectTasks(i),e.createNewTask(i,a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,