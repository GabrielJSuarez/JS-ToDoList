(()=>{"use strict";class t{constructor(t,e,s,n,l="default"){this.title=t,this.description=e,this.dueDate=s,this.priority=n,this.project=l}static getColor(t,e){let s;return s="low"===t[e].priority?"success":"medium"===t[e].priority?"info":"danger",s}static buttonColor(t){let e,s;return"success"!==t&&"info"!==t||(e="warning",s="danger"),"danger"===t&&(e="primary",s="warning"),[e,s]}static allTasks(t){const e=[];for(let s=0;s<t.length;s+=1)e.push(...t[s].tasks);return e}static deleteTask(t,e,s,n){const l=document.querySelectorAll("#delete-btn");for(let i=0;i<l.length;i+=1)l[i].addEventListener("click",(()=>{t.splice(i,1),localStorage.setItem("projects",JSON.stringify(s)),n(e,t)}))}static editTask(t,e,s,n){const l=document.querySelectorAll("#edit-btn");for(let i=0;i<l.length;i+=1)l[i].addEventListener("click",(()=>{const l=document.querySelector(`#edit-task-name-${i}`).value,a=document.querySelector(`#edit-task-description-${i}`).value,r=document.querySelector(`#edit-task-date-${i}`).value,o=document.querySelector(`#edit-task-priority-${i}`).value;""!==l&&""!==a&&""!==r&&""!==o&&(t[i].title=l,t[i].description=a,t[i].date=r,t[i].priority=o,localStorage.setItem("projects",JSON.stringify(s)),n(e,t))}))}}const e=(()=>{const e=()=>{const t=document.forms["tasks-form"];return t.addEventListener("submit",(t=>{t.preventDefault()})),t},s=(e,n,l)=>{const i=document.querySelector("#tasks-list");i.innerHTML="";const a=document.querySelector("#add-task"),r=document.querySelector("#multiCollapseExample2");if("All Tasks"===e){a.classList.add("d-none"),r.classList.add("d-none");const e=t.allTasks(l);for(let s=0;s<e.length;s+=1){const n=t.getColor(e,s);i.innerHTML+=`\n            <li class="">\n                        <p>\n                            <button class="btn btn-${n} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${s}" aria-expanded="false" aria-controls="task-${s}">\n                                ${e[s].title}\n                            </button>\n                        </p>\n                        \n                        <div class="collapse" id="task-${s}">\n                            <div class="card card-body bg-${n} mb-4">\n                                <ul class="list-group">\n                                    <li class="list-group-item bg-${n} text-white"><span class="fw-bold">Description</span>: ${e[s].description}</li>\n                                    <li class="list-group-item bg-${n} text-white"><span class="fw-bold">Due Date</span>: ${e[s].dueDate}</li>\n                                    <li class="list-group-item bg-${n} text-white"><span class="fw-bold">Priority</span>: ${e[s].priority}</li>\n                                </ul>\n                            </div>\n                        </div>\n                    </li>\n        `}}else{a.classList.remove("d-none"),r.classList.remove("d-none"),i.innerHTML="";for(let e=0;e<n.length;e+=1){const s=t.getColor(n,e);i.innerHTML+=`\n            <li>\n                <p>\n                    <button class="btn btn-${s} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${e}" aria-expanded="false" aria-controls="task-${e}">\n                        ${n[e].title}\n                    </button>\n                </p>\n                    \n                <div class="collapse" id="task-${e}">\n                    <div class="card card-body bg-${s} mb-4">\n                        <ul class="list-group ">\n                            <li class="list-group-item bg-${s} text-white"><span class="fw-bold">Description</span>: ${n[e].description}</li>\n                            <li class="list-group-item bg-${s} text-white"><span class="fw-bold">Due Date</span>: ${n[e].dueDate}</li>\n                            <li class="list-group-item bg-${s} text-white"><span class="fw-bold">Priority</span>: ${n[e].priority}</li>\n                        </ul>\n                    \n                        <div class="d-flex mt-3 justify-content-between">\n                            <div>\n                                <p>\n                                    <button class="btn btn-${t.buttonColor(s)[0]}" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample-${e}" aria-expanded="false" aria-controls="collapseExample-${e}">\n                                        Edit\n                                    </button>\n                                       \n                                    <button id="delete-btn" type="button" class="btn btn-${t.buttonColor(s)[1]}">Mark as complete</button>\n                                </p>\n                                \n                                <div class="collapse multi-collapse" id="collapseExample-${e}">\n                                    <form id="edit-tasks-form">\n                                        <div class="mb-3">\n                                            <label for="edit-task-name-${e}" class="form-label text-info">Task Title</label>\n                                            <input type="text" class="form-control" id="edit-task-name-${e}" required>\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-description-${e}" class="form-label text-info">Task Description</label>\n                                            <input type="text" class="form-control" id="edit-task-description-${e}" required>\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-date-${e}" class="form-label text-info">Due Date</label>\n                                            <br>\n                                            <input type="date" id="edit-task-date-${e}" name="trip-start" required>\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-priority-${e}" class="form-label text-info">Priority</label>\n                                            <select id="edit-task-priority-${e}" class="form-select" aria-label="Default select example" required>\n                                                <option selected>Select Priority</option>\n                                                <option value="low">Low</option>\n                                                <option value="medium">Medium</option>\n                                                <option value="high">High</option>\n                                            </select>\n                                        </div>\n                                        \n                                        <div>\n                                            <button id="edit-btn" type="submit" class="btn btn-secondary">Edit Task</button>\n                                        </div\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </li>\n        `,document.querySelector(`#edit-task-name-${e}`).setAttribute("value",n[e].title),document.querySelector(`#edit-task-description-${e}`).setAttribute("value",n[e].description),document.querySelector(`#edit-task-date-${e}`).setAttribute("value",n[e].dueDate)}t.editTask(n,e,l,s),t.deleteTask(n,e,l,s)}};return{createNewTask:n=>{const l=e();document.querySelector("#task-btn").addEventListener("click",(()=>{const i=l.querySelector("#task-name").value,a=l.querySelector("#task-description").value,r=l.querySelector("#task-date").value,o=l.querySelector("#task-priority").value,c=l.querySelector("#task-project").value,d=n.filter((t=>t.title===c));if(""===i)return;if(""===a)return;if(""===r)return;if(""===o)return;const u=new t(i,a,r,o,c);d[0].tasks.push(u),localStorage.setItem("projects",JSON.stringify(n)),e(),s(c,d[0].tasks,n)}))},renderTasks:s}})();class s{constructor(t){this.title=t,this.tasks=[]}static newProject(t,e){const n=new s(t);e.push(n)}}const n=(()=>{const n=()=>{const t=document.forms["project-form"];return t.addEventListener("submit",(t=>{t.preventDefault()})),t},l=t=>{const e=document.querySelector("#project-list");e.innerHTML='\n            <li class="list-group-item list-group-item-dark btn my-1" id="all-projects">All Tasks</li>\n        ';for(let s=0;s<t.length;s+=1)e.innerHTML+=`\n                <li class="list-group-item list-group-item-dark btn my-1" id="project-list">${t[s].title}</li>\n            `};return{addProject:t=>{document.querySelector("#project-btn").addEventListener("click",(()=>{n(),((t,e)=>{const n=e().querySelector("#project-title").value;""!==n&&(s.newProject(n,t),localStorage.setItem("projects",JSON.stringify(t)))})(t,n),l(t),document.querySelector("#project-form").reset()}))},displayProjectTasks:s=>{const n=document.querySelector("#project-list");n.addEventListener("click",(l=>{const i=l.target.textContent,a=s.filter((t=>t.title===i)),r=t.allTasks(s);((t,e)=>{const s=t.target;[...e.children].forEach((t=>{t.classList.remove("active")})),s.classList.add("active"),document.querySelector("#task-display").classList.remove("d-none")})(l,n),(t=>{const e=document.querySelector("#project");e.innerHTML="",e.innerHTML+=`\n        <input type="hidden" value="${t}" id="task-project" class="form-control" aria-label="Default select example">\n    `})(i),"All Tasks"===i?e.renderTasks(i,r,s):e.renderTasks(i,a[0].tasks,s)}))},renderProjectView:l}})(),l=JSON.parse(localStorage.getItem("projects"))||[];n.renderProjectView(l),n.addProject(l),n.displayProjectTasks(l),e.createNewTask(l)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,