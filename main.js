(()=>{"use strict";var t={d:(e,s)=>{for(var n in s)t.o(s,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:s[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};t.d({},{I:()=>l,i:()=>i});const e=(()=>{const t=()=>{const t=document.forms["project-form"];return t.addEventListener("submit",(t=>{t.preventDefault()})),t};return{addProject:e=>{document.querySelector("#project-btn").addEventListener("click",(()=>{t(),((t,e)=>{const s=e().querySelector("#project-title").value;""!==s&&l.newProject(s,t)})(e,t),(t=>{const e=document.querySelector("#project-list");e.innerHTML='\n            <li class="list-group-item list-group-item-dark btn my-1" id="all-projects">All Projects</li>\n        ';for(let s=0;s<t.length;s+=1)e.innerHTML+=`\n                <li class="list-group-item list-group-item-dark btn my-1" id="project-list">${t[s].title}</li>\n            `})(e),document.querySelector("#project-form").reset()}))},displayProjectTasks:(t,e)=>{const s=document.querySelector("#project-list");s.addEventListener("click",(e=>{const n=e.target.textContent;((t,e)=>{const s=t.target;[...e.children].forEach((t=>{t.classList.remove("active")})),s.classList.add("active"),document.querySelector("#task-display").classList.remove("d-none")})(e,s),(t=>{const e=document.querySelector("#project");e.innerHTML="",e.innerHTML+=`\n        <input type="hidden" value="${t}" id="task-project" class="form-control" aria-label="Default select example">\n    `})(n),((t,e)=>{const s=document.querySelector("#tasks-list");s.innerHTML="";const n=e.filter((t=>!0===t.exists)),l=document.querySelector("#add-task"),o=document.querySelector("#multiCollapseExample2");if(document.querySelector("#all-projects").addEventListener("click",(()=>{for(let t=0;t<n.length;t+=1){const e=i.getColor(n,t);s.innerHTML+=`\n                    <li class="">\n                        <p>\n                            <button class="btn btn-${e} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${t}" aria-expanded="false" aria-controls="task-${t}">\n                                ${n[t].title}\n                            </button>\n                        </p>\n                        \n                        <div class="collapse" id="task-${t}">\n                            <div class="card card-body bg-${e} mb-4">\n                                <ul class="list-group">\n                                    <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Description</span>: ${n[t].description}</li>\n                                    <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Due Date</span>: ${n[t].dueDate}</li>\n                                    <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Priority</span>: ${n[t].priority}</li>\n                                </ul>\n                            </div>\n                        </div>\n                    </li>\n                `}})),"All Projects"!==t){l.classList.remove("d-none"),o.classList.remove("d-none");const n=e.filter((e=>e.project===t&&!0===e.exists));for(let t=0;t<n.length;t+=1){const e=i.getColor(n,t);s.innerHTML+=`\n                    <li class="">\n                        <p>\n                            <button class="btn btn-${e} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${t}" aria-expanded="false" aria-controls="task-${t}">\n                                ${n[t].title}\n                            </button>\n                        </p>\n                        \n                        <div class="collapse" id="task-${t}">\n                            <div class="card card-body bg-${e} mb-4">\n                                <ul class="list-group ">\n                                    <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Description</span>: ${n[t].description}</li>\n                                    <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Due Date</span>: ${n[t].dueDate}</li>\n                                    <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Priority</span>: ${n[t].priority}</li>\n                                </ul>\n                                \n                                <div class="d-flex mt-3">\n                                    <button type="button" class="btn btn-outline-dark mx-3">Edit</button>\n                                    <button id="delete-task" type="button" class="btn btn-outline-warning">Delete</button>\n                                </div>\n                                \n                            </div>\n                        </div>\n                    </li>\n                `}}})(n,t)}))}}})(),s=(()=>{const t=(t,e,s,i)=>{i.addEventListener("click",(i=>{i.target.id===`delete-btn-${s}`&&(t[s].exists=!1,n(e,t))}))},e=(t,e,s,i)=>{i.addEventListener("click",(i=>{if(i.target.id===`edit-btn-${s}`){const i=document.querySelector(`#edit-task-name-${s}`).value,l=document.querySelector(`#edit-task-description-${s}`).value,o=document.querySelector(`#edit-task-date-${s}`).value,a=document.querySelector(`#edit-task-priority-${s}`).value;if(""===i)return;if(""===l)return;if(""===o)return;if(""===a)return;t[s].title=i,t[s].description=l,t[s].dueDate=o,t[s].priority=a,n(e,t)}}))},n=(n,l)=>{const o=document.querySelector("#tasks-list");o.innerHTML="";const a=l.filter((t=>t.project===n&&!0===t.exists));for(let l=0;l<a.length;l+=1){const r=i.getColor(a,l);o.innerHTML+=`\n            <li>\n                <p>\n                    <button class="btn btn-${r} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${l}" aria-expanded="false" aria-controls="task-${l}">\n                        ${a[l].title}\n                    </button>\n                </p>\n                    \n                <div class="collapse" id="task-${l}">\n                    <div class="card card-body bg-${r} mb-4">\n                        <ul class="list-group ">\n                            <li class="list-group-item bg-${r} text-white"><span class="fw-bold">Description</span>: ${a[l].description}</li>\n                            <li class="list-group-item bg-${r} text-white"><span class="fw-bold">Due Date</span>: ${a[l].dueDate}</li>\n                            <li class="list-group-item bg-${r} text-white"><span class="fw-bold">Priority</span>: ${a[l].priority}</li>\n                        </ul>\n                    \n                        <div class="d-flex mt-3 justify-content-between">\n                            <div>\n                                <p>\n                                    <button class="btn btn-${i.buttonColor(r)[0]}" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample-${l}" aria-expanded="false" aria-controls="collapseExample-${l}">\n                                        Edit\n                                    </button>\n\n                                    <button id="delete-btn-${l}" type="button" class="btn btn-${i.buttonColor(r)[1]}">Delete</button>\n                                </p>\n\n                                <div class="collapse multi-collapse" id="collapseExample-${l}">\n                                    <form id="edit-tasks-form">\n                                        <div class="mb-3">\n                                            <label for="edit-task-name" class="form-label text-info">Task Title</label>\n                                            <input type="text" class="form-control" id="edit-task-name-${l}">\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-description" class="form-label text-info">Task Description</label>\n                                            <input type="text" class="form-control" id="edit-task-description-${l}">\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-date" class="form-label text-info">Due Date</label>\n                                            <br>\n                                            <input type="date" id="edit-task-date-${l}" name="trip-start">\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-priority" class="form-label text-info">Priority</label>\n                                            <select id="edit-task-priority-${l}" class="form-select" aria-label="Default select example">\n                                                <option selected>Select Priority</option>\n                                                <option value="low">Low</option>\n                                                <option value="medium">Medium</option>\n                                                <option value="high">High</option>\n                                            </select>\n                                        </div>\n                                        <div>\n                                            <button id="edit-btn-${l}" type="submit" class="btn btn-secondary">Edit Task</button>\n                                        </div\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </li>\n            `,document.querySelector(`#edit-task-name-${l}`).setAttribute("value",a[l].title),document.querySelector(`#edit-task-description-${l}`).setAttribute("value",a[l].description),document.querySelector(`#edit-task-date-${l}`).setAttribute("value",a[l].dueDate),document.querySelector(`#edit-task-priority-${l}`).setAttribute("value",a[l].priority),t(a,n,l,o,s.renderTask),e(a,n,l,o,s.renderTask)}};return{createNewTask:t=>{const e=(()=>{const t=document.forms["tasks-form"];return t.addEventListener("submit",(t=>{t.preventDefault()})),t})();document.querySelector("#task-btn").addEventListener("click",(()=>{const s=e.querySelector("#task-name").value,l=e.querySelector("#task-description").value,o=e.querySelector("#task-date").value,a=e.querySelector("#task-priority").value,r=e.querySelector("#task-project").value;""!==s&&""!==l&&""!==o&&""!==a&&(i.newTask(t,s,l,o,a,r),n(r,t),document.querySelector("#tasks-form").reset())}))},renderTask:n}})(),n=[{title:"Task 1",description:"Description 1",dueDate:"2021-06-10",priority:"low",project:"Project 1",exists:!0},{title:"Task 2",description:"Description 2",dueDate:"2021-06-10",priority:"medium",project:"Project 2",exists:!0},{title:"Task 3",description:"Description 3",dueDate:"2021-06-10",priority:"high",project:"Project 3",exists:!0}];class i{constructor(t,e,s,n,i="default"){this.title=t,this.description=e,this.dueDate=s,this.priority=n,this.project=i,this.exists=!0}static newTask(t,e,s,n,l,o){const a=new i(e,s,n,l,o);t.push(a)}static getColor(t,e){let s;return s="low"===t[e].priority?"success":"medium"===t[e].priority?"info":"danger",s}static buttonColor(t){let e,s;return"success"!==t&&"info"!==t||(e="warning",s="danger"),"danger"===t&&(e="primary",s="warning"),[e,s]}}class l{constructor(t){this.title=t}static newProject(t,e){const s=new l(t);e.push(s)}}e.addProject([]),e.displayProjectTasks(n),s.createNewTask(n,i)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,