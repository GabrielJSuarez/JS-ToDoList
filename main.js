(()=>{"use strict";class t{constructor(t){this.title=t}}const e=document.forms["project-form"];e.addEventListener("submit",(t=>{t.preventDefault()}));const s=(()=>{const s=(t,e)=>{const n=document.querySelector("#tasks-list");n.innerHTML="";let l=e.filter((t=>!0===t.exists));const o=document.querySelector("#add-task"),a=document.querySelector("#multiCollapseExample2");if("All Projects"===t){o.classList.add("d-none"),a.classList.add("d-none");for(let t=0;t<l.length;t++){let e=i(l,t);n.innerHTML+=`\n                  <li class="">\n                      <p>\n                        <button class="btn btn-${e} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${t}" aria-expanded="false" aria-controls="task-${t}">\n                          ${l[t].title}\n                        </button>\n                      </p>\n                        \n                      <div class="collapse" id="task-${t}">\n                        <div class="card card-body bg-${e} mb-4">\n                          <ul class="list-group">\n                              <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Description</span>: ${l[t].description}</li>\n                              <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Due Date</span>: ${l[t].dueDate}</li>\n                              <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Priority</span>: ${l[t].priority}</li>\n                          </ul>\n                        </div>\n                      </div>\n                  </li>\n            `}}else{o.classList.remove("d-none"),a.classList.remove("d-none");let l=e.filter((e=>e.project===t&&!0===e.exists));for(let e=0;e<l.length;e++){let o=i(l,e);n.innerHTML+=`\n                  <li class="">\n                      <p>\n                        <button class="btn btn-${o} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${e}" aria-expanded="false" aria-controls="task-${e}">\n                          ${l[e].title}\n                        </button>\n                      </p>\n                        \n                      <div class="collapse" id="task-${e}">\n                        <div class="card card-body bg-${o} mb-4">\n                          <ul class="list-group ">\n                              <li class="list-group-item bg-${o} text-white"><span class="fw-bold">Description</span>: ${l[e].description}</li>\n                              <li class="list-group-item bg-${o} text-white"><span class="fw-bold">Due Date</span>: ${l[e].dueDate}</li>\n                              <li class="list-group-item bg-${o} text-white"><span class="fw-bold">Priority</span>: ${l[e].priority}</li>\n                          </ul>\n                          \n                          <div class="d-flex mt-3">\n                              <button type="button" class="btn btn-outline-dark mx-3">Edit</button>\n                              <button id="delete-task" type="button" class="btn btn-outline-warning">Delete</button>\n                          </div>\n                          \n                        </div>\n                      </div>\n                  </li>\n            `,document.querySelector("#delete-task").onclick=()=>{l[e].exists=!1,s(t,l)}}}},i=(t,e)=>{let s;return s="low"===t[e].priority?"success":"medium"===t[e].priority?"info":"danger",s};return{addProject:s=>{document.querySelector("#project-btn").addEventListener("click",(()=>{(s=>{const i=e.querySelector("#project-title").value,n=new t(i);s.push(n)})(s),(t=>{const e=document.querySelector("#project-list");e.innerHTML='\n          <li class="list-group-item list-group-item-dark btn my-1" id="project-list">All Projects</li>\n        ';for(let s=0;s<t.length;s++)e.innerHTML+=`\n        <li class="list-group-item list-group-item-dark btn my-1" id="project-list">${t[s].title}</li>\n      `})(s),document.querySelector("#project-form").reset()}))},displayProjectTasks:t=>{const e=document.querySelector("#project-list");e.addEventListener("click",(i=>{const n=i.target.textContent;((t,e)=>{const s=t.target;[...e.children].forEach((function(t){t.classList.remove("active")})),s.classList.add("active"),document.querySelector("#task-display").classList.remove("d-none")})(i,e),(t=>{const e=document.querySelector("#project");e.innerHTML="",e.innerHTML+=`\n        <input type="hidden" value="${t}" id="task-project" class="form-control" aria-label="Default select example">\n    `})(n),s(n,t)}))}}})();class i{constructor(t,e,s,i,n="default"){this.title=t,this.description=e,this.dueDate=s,this.priority=i,this.project=n,this.exists=!0}}const n=document.forms["tasks-form"];n.addEventListener("submit",(t=>{t.preventDefault()}));const l=(()=>{const t=(s,i)=>{const n=document.querySelector("#tasks-list");n.innerHTML="";let l=i.filter((t=>t.project===s&&!0===t.exists));for(let i=0;i<l.length;i++){let o=e(l,i);n.innerHTML+=`\n            <li class="">\n                <p>\n                    <button class="btn btn-${o} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${i}" aria-expanded="false" aria-controls="task-${i}">\n                      ${l[i].title}\n                    </button>\n                </p>\n                    \n                <div class="collapse" id="task-${i}">\n                    <div class="card card-body bg-${o} mb-4">\n                        <ul class="list-group ">\n                            <li class="list-group-item bg-${o} text-white"><span class="fw-bold">Description</span>: ${l[i].description}</li>\n                            <li class="list-group-item bg-${o} text-white"><span class="fw-bold">Due Date</span>: ${l[i].dueDate}</li>\n                            <li class="list-group-item bg-${o} text-white"><span class="fw-bold">Priority</span>: ${l[i].priority}</li>\n                        </ul>\n                    \n                        <div class="d-flex mt-3">\n                            <div>\n                                <p>\n                                    <button id="edit-task" type="button" class="btn btn-info mt-4" href="#multiCollapseExample1" data-bs-toggle="collapse" aria-expanded="false" aria-controls="multiCollapseExample1">Edit</button>\n                                    <button id="delete-task" type="button" class="btn btn-outline-warning mt-4 ms-4">Delete</button>\n                                </p>\n                                <div class="collapse multi-collapse" id="multiCollapseExample1">\n                                    <form id="tasks-form">\n                                        <div class="mb-3">\n                                            <label for="edit-task-name" class="form-label text-info">Task Title</label>\n                                            <input type="text" class="form-control" id="edit-task-name">\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-description" class="form-label text-info">Task Description</label>\n                                            <input type="text" class="form-control" id="edit-task-description">\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-date" class="form-label text-info">Due Date</label>\n                                            <br>\n                                            <input type="date" id="edit-task-date" name="trip-start">\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-priority" class="form-label text-info">Priority</label>\n                                            <select id="edit-task-priority" class="form-select" aria-label="Default select example">\n                                                <option selected>Select Priority</option>\n                                                <option value="low">Low</option>\n                                                <option value="medium">Medium</option>\n                                                <option value="high">High</option>\n                                            </select>\n                                        </div>\n                                        <div>\n                                            <button id="edit-task-btn" type="submit" class="btn btn-info">Submit</button>\n                                        </div\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </li>\n            `,document.querySelector("#delete-task").onclick=()=>{l[i].exists=!1,t(s,l)};const a=document.querySelector("#edit-task-btn");document.querySelector("#edit-task-name").value=l[i].title,document.querySelector("#edit-task-description").value=l[i].description,document.querySelector("#edit-task-date").value=l[i].dueDate,document.querySelector("#edit-task-priority").value=l[i].priority,a.onclick=()=>{const e=document.querySelector("#edit-task-name").value,n=document.querySelector("#edit-task-description").value,o=document.querySelector("#edit-task-date").value,a=document.querySelector("#edit-task-priority").value;l[i].title=e,l[i].description=n,l[i].dueDate=o,l[i].priority=a,t(s,l)}}},e=(t,e)=>{let s;return s="low"===t[e].priority?"success":"medium"===t[e].priority?"info":"danger",s};return{createNewTask:e=>{document.querySelector("#task-btn").addEventListener("click",(()=>{const s=n.querySelector("#task-name").value,l=n.querySelector("#task-description").value,o=n.querySelector("#task-date").value,a=n.querySelector("#task-priority").value,r=n.querySelector("#task-project").value;((t,e,s,n,l,o)=>{const a=new i(e,s,n,l,o);t.push(a)})(e,s,l,o,a,r),t(r,e),document.querySelector("#tasks-form").reset()}))}}})(),o=[{title:"Task 1",description:"Description 1",dueDate:"2021-06-10",priority:"low",project:"Project 1",exists:!0},{title:"Task 2",description:"Description 2",dueDate:"2021-06-10",priority:"medium",project:"Project 2",exists:!0},{title:"Task 3",description:"Description 3",dueDate:"2021-06-10",priority:"high",project:"Project 3",exists:!0}];s.addProject([],o),s.displayProjectTasks(o),l.createNewTask(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,