(()=>{"use strict";class t{constructor(t){this.title=t}}const e=document.forms["project-form"];e.addEventListener("submit",(t=>{t.preventDefault()}));const s=(()=>{const s=(t,e)=>{const i=document.querySelector("#tasks-list");i.innerHTML="";let l=e.filter((t=>!0===t.exists));const a=document.querySelector("#add-task"),o=document.querySelector("#multiCollapseExample2");if("All Projects"===t){a.classList.add("d-none"),o.classList.add("d-none");for(let t=0;t<l.length;t++){let e=n(l,t);i.innerHTML+=`\n                  <li class="">\n                      <p>\n                        <button class="btn btn-${e} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${t}" aria-expanded="false" aria-controls="task-${t}">\n                          ${l[t].title}\n                        </button>\n                      </p>\n                        \n                      <div class="collapse" id="task-${t}">\n                        <div class="card card-body bg-${e} mb-4">\n                          <ul class="list-group">\n                              <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Description</span>: ${l[t].description}</li>\n                              <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Due Date</span>: ${l[t].dueDate}</li>\n                              <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Priority</span>: ${l[t].priority}</li>\n                          </ul>\n                        </div>\n                      </div>\n                  </li>\n            `}}else{a.classList.remove("d-none"),o.classList.remove("d-none");let l=e.filter((e=>e.project===t&&!0===e.exists));for(let e=0;e<l.length;e++){let a=n(l,e);i.innerHTML+=`\n                  <li class="">\n                      <p>\n                        <button class="btn btn-${a} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${e}" aria-expanded="false" aria-controls="task-${e}">\n                          ${l[e].title}\n                        </button>\n                      </p>\n                        \n                      <div class="collapse" id="task-${e}">\n                        <div class="card card-body bg-${a} mb-4">\n                          <ul class="list-group ">\n                              <li class="list-group-item bg-${a} text-white"><span class="fw-bold">Description</span>: ${l[e].description}</li>\n                              <li class="list-group-item bg-${a} text-white"><span class="fw-bold">Due Date</span>: ${l[e].dueDate}</li>\n                              <li class="list-group-item bg-${a} text-white"><span class="fw-bold">Priority</span>: ${l[e].priority}</li>\n                          </ul>\n                          \n                          <div class="d-flex mt-3">\n                              <button type="button" class="btn btn-outline-dark mx-3">Edit</button>\n                              <button id="delete-task" type="button" class="btn btn-outline-warning">Delete</button>\n                          </div>\n                          \n                        </div>\n                      </div>\n                  </li>\n            `,document.querySelector("#delete-task").onclick=()=>{l[e].exists=!1,s(t,l)}}}},n=(t,e)=>{let s;return s="low"===t[e].priority?"success":"medium"===t[e].priority?"info":"danger",s};return{addProject:s=>{document.querySelector("#project-btn").addEventListener("click",(()=>{(s=>{const n=e.querySelector("#project-title").value,i=new t(n);s.push(i)})(s),(t=>{const e=document.querySelector("#project-list");e.innerHTML='\n          <li class="list-group-item list-group-item-dark btn my-1" id="project-list">All Projects</li>\n        ';for(let s=0;s<t.length;s++)e.innerHTML+=`\n        <li class="list-group-item list-group-item-dark btn my-1" id="project-list">${t[s].title}</li>\n      `})(s),document.querySelector("#project-form").reset()}))},displayProjectTasks:t=>{const e=document.querySelector("#project-list");e.addEventListener("click",(n=>{const i=n.target.textContent;((t,e)=>{const s=t.target;[...e.children].forEach((function(t){t.classList.remove("active")})),s.classList.add("active"),document.querySelector("#task-display").classList.remove("d-none")})(n,e),(t=>{const e=document.querySelector("#project");e.innerHTML="",e.innerHTML+=`\n        <input type="hidden" value="${t}" id="task-project" class="form-control" aria-label="Default select example">\n    `})(i),s(i,t)}))}}})();class n{constructor(t,e,s,n,i="default"){this.title=t,this.description=e,this.dueDate=s,this.priority=n,this.project=i,this.exists=!0}}const i=document.forms["tasks-form"];i.addEventListener("submit",(t=>{t.preventDefault()}));const l=(()=>{const t=(s,n)=>{const i=document.querySelector("#tasks-list");i.innerHTML="";let l=n.filter((t=>t.project===s&&!0===t.exists));for(let n=0;n<l.length;n++){let a=e(l,n);i.innerHTML+=`\n            <li class="">\n                <p>\n                    <button class="btn btn-${a} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${n}" aria-expanded="false" aria-controls="task-${n}">\n                      ${l[n].title}\n                    </button>\n                </p>\n                    \n                <div class="collapse" id="task-${n}">\n                    <div class="card card-body bg-${a} mb-4">\n                        <ul class="list-group ">\n                            <li class="list-group-item bg-${a} text-white"><span class="fw-bold">Description</span>: ${l[n].description}</li>\n                            <li class="list-group-item bg-${a} text-white"><span class="fw-bold">Due Date</span>: ${l[n].dueDate}</li>\n                            <li class="list-group-item bg-${a} text-white"><span class="fw-bold">Priority</span>: ${l[n].priority}</li>\n                        </ul>\n                    \n                        <div class="d-flex mt-3">\n                            <div>\n                                <p>\n                                    <button type="button" class="btn btn-info mt-4" href="#multiCollapseExample1" data-bs-toggle="collapse" aria-expanded="false" aria-controls="multiCollapseExample1">Edit</button>\n                                </p>\n                                <div class="collapse multi-collapse" id="multiCollapseExample1">\n                                    <form id="tasks-form">\n                                        <div class="mb-3">\n                                            <label for="task-name" class="form-label text-info">Task Title</label>\n                                            <input type="text" class="form-control" id="task-name">\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="task-description" class="form-label text-info">Task Description</label>\n                                            <input type="text" class="form-control" id="task-description">\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="task-date" class="form-label text-info">Due Date</label>\n                                            <br>\n                                            <input type="date" id="task-date" name="trip-start">\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="task-priority" class="form-label text-info">Priority</label>\n                                            <select id="task-priority" class="form-select" aria-label="Default select example">\n                                            <option selected>Select Priority</option>\n                                            <option value="low">Low</option>\n                                            <option value="medium">Medium</option>\n                                            <option value="high">High</option>\n                                            </select>\n                                        </div>\n                                        <div>\n                                            <button id="task-btn" type="submit" class="btn btn-info">Submit</button>\n                                        </div\n                                    </form>\n                                </div>\n                            </div>\n                            <button id="delete-task" type="button" class="btn btn-outline-warning">Delete</button>\n                        </div>\n                    </div>\n                </div>\n            </li>\n            `,document.querySelector("#delete-task").onclick=()=>{l[n].exists=!1,t(s,l)}}},e=(t,e)=>{let s;return s="low"===t[e].priority?"success":"medium"===t[e].priority?"info":"danger",s};return{createNewTask:e=>{document.querySelector("#task-btn").addEventListener("click",(()=>{const s=i.querySelector("#task-name").value,l=i.querySelector("#task-description").value,a=i.querySelector("#task-date").value,o=i.querySelector("#task-priority").value,r=i.querySelector("#task-project").value;((t,e,s,i,l,a)=>{const o=new n(e,s,i,l,a);t.push(o)})(e,s,l,a,o,r),t(r,e),document.querySelector("#tasks-form").reset()}))}}})(),a=[{title:"Task 1",description:"Description 1",dueDate:"2021-06-10",priority:"low",project:"Project 1",exists:!0},{title:"Task 2",description:"Description 2",dueDate:"2021-06-10",priority:"medium",project:"Project 2",exists:!0},{title:"Task 3",description:"Description 3",dueDate:"2021-06-10",priority:"high",project:"Project 3",exists:!0}];s.addProject([],a),s.displayProjectTasks(a),l.createNewTask(a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,