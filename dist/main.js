(()=>{"use strict";class t{constructor(t){this.title=t}}const e=document.forms["project-form"];e.addEventListener("submit",(t=>{t.preventDefault()}));const s=(()=>{const s=(t,e)=>{let s;return s="low"===t[e].priority?"success":"medium"===t[e].priority?"info":"danger",s};return{addProject:s=>{document.querySelector("#project-btn").addEventListener("click",(()=>{(s=>{const n=e.querySelector("#project-title").value,i=new t(n);s.push(i)})(s),(t=>{const e=document.querySelector("#project-list");e.innerHTML='\n          <li class="list-group-item list-group-item-dark btn my-1" id="project-list">All Projects</li>\n        ';for(let s=0;s<t.length;s++)e.innerHTML+=`\n        <li class="list-group-item list-group-item-dark btn my-1" id="project-list">${t[s].title}</li>\n      `})(s),document.querySelector("#project-form").reset()}))},displayProjectTasks:t=>{const e=document.querySelector("#project-list");e.addEventListener("click",(n=>{const i=n.target.textContent;((t,e)=>{const s=t.target;[...e.children].forEach((function(t){t.classList.remove("active")})),s.classList.add("active"),document.querySelector("#task-display").classList.remove("d-none")})(n,e),(t=>{const e=document.querySelector("#project");e.innerHTML="",e.innerHTML+=`\n        <input type="hidden" value="${t}" id="task-project" class="form-control" aria-label="Default select example">\n    `})(i),((t,e)=>{const n=document.querySelector("#tasks-list");n.innerHTML="";const i=document.querySelector("#add-task"),l=document.querySelector("#multiCollapseExample2");if("All Projects"===t){i.classList.add("d-none"),l.classList.add("d-none");for(let t=0;t<e.length;t++){let i=s(e,t);n.innerHTML+=`\n                  <li class="">\n                      <p>\n                        <button class="btn btn-${i} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${t}" aria-expanded="false" aria-controls="task-${t}">\n                          ${e[t].title}\n                        </button>\n                      </p>\n                        \n                      <div class="collapse" id="task-${t}">\n                        <div class="card card-body bg-${i} mb-4">\n                          <ul class="list-group">\n                              <li class="list-group-item bg-${i} text-white"><span class="fw-bold">Description</span>: ${e[t].description}</li>\n                              <li class="list-group-item bg-${i} text-white"><span class="fw-bold">Due Date</span>: ${e[t].dueDate}</li>\n                              <li class="list-group-item bg-${i} text-white"><span class="fw-bold">Priority</span>: ${e[t].priority}</li>\n                          </ul>\n                        </div>\n                      </div>\n                  </li>\n            `}}else{i.classList.remove("d-none"),l.classList.remove("d-none");let r=e.filter((e=>e.project===t));for(let t=0;t<r.length;t++){let e=s(r,t);n.innerHTML+=`\n                  <li class="">\n                      <p>\n                        <button class="btn btn-${e} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${t}" aria-expanded="false" aria-controls="task-${t}">\n                          ${r[t].title}\n                        </button>\n                      </p>\n                        \n                      <div class="collapse" id="task-${t}">\n                        <div class="card card-body bg-${e} mb-4">\n                          <ul class="list-group ">\n                              <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Description</span>: ${r[t].description}</li>\n                              <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Due Date</span>: ${r[t].dueDate}</li>\n                              <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Priority</span>: ${r[t].priority}</li>\n                          </ul>\n                        </div>\n                      </div>\n                  </li>\n            `}}})(i,t)}))}}})();class n{constructor(t,e,s,n,i="default"){this.title=t,this.description=e,this.dueDate=s,this.priority=n,this.project=i,this.exists=!0}}const i=document.forms["tasks-form"];i.addEventListener("submit",(t=>{t.preventDefault()}));const l=(()=>{const t=(t,s)=>{const n=document.querySelector("#tasks-list");n.innerHTML="";let i=s.filter((e=>e.project===t&&!0===e.exists));for(let l=0;l<i.length;l++){let r=e(i,l);n.innerHTML+=`\n              <li class="">\n                  <p>\n                    <button class="btn btn-${r} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${l}" aria-expanded="false" aria-controls="task-${l}">\n                      ${i[l].title}\n                    </button>\n                  </p>\n                    \n                  <div class="collapse" id="task-${l}">\n                    <div class="card card-body bg-${r} mb-4">\n                      <ul class="list-group ">\n                          <li class="list-group-item bg-${r} text-white"><span class="fw-bold">Description</span>: ${i[l].description}</li>\n                          <li class="list-group-item bg-${r} text-white"><span class="fw-bold">Due Date</span>: ${i[l].dueDate}</li>\n                          <li class="list-group-item bg-${r} text-white"><span class="fw-bold">Priority</span>: ${i[l].priority}</li>\n                      </ul>\n                      \n                      <div class="d-flex mt-3">\n                          <button type="button" class="btn btn-outline-dark mx-3" onclick="editTask(${l})">Edit</button>\n                          <button type="button" class="btn btn-outline-warning" onclick="deleteTask(${l}, ${s}, ${t})">Delete</button>\n                      </div>\n                      \n                    </div>\n                  </div>\n              </li>\n            `}},e=(t,e)=>{let s;return s="low"===t[e].priority?"success":"medium"===t[e].priority?"info":"danger",s};return{createNewTask:e=>{document.querySelector("#task-btn").addEventListener("click",(()=>{const s=i.querySelector("#task-name").value,l=i.querySelector("#task-description").value,r=i.querySelector("#task-date").value,o=i.querySelector("#task-priority").value,a=i.querySelector("#task-project").value;((t,e,s,i,l,r)=>{const o=new n(e,s,i,l,r);t.push(o)})(e,s,l,r,o,a),t(a,e),document.querySelector("#tasks-form").reset()}))},deleteTask:(e,s,n)=>{s[e].exists=!1,t(n,s)}}})(),r=[{title:"Task 1",description:"Description 1",dueDate:"2021-06-10",priority:"low",project:"Project 1"},{title:"Task 2",description:"Description 2",dueDate:"2021-06-10",priority:"medium",project:"Project 2"},{title:"Task 3",description:"Description 3",dueDate:"2021-06-10",priority:"high",project:"Project 3"}];s.addProject([],r),s.displayProjectTasks(r),l.createNewTask(r)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,