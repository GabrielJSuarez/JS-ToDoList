(()=>{"use strict";var t={d:(e,s)=>{for(var n in s)t.o(s,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:s[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};t.d({},{I:()=>l,i:()=>o});const e=(()=>{const t=()=>{const t=document.forms["tasks-form"];return t.addEventListener("submit",(t=>{t.preventDefault()})),t},e=(t,e)=>{const n=document.querySelectorAll("#delete-btn");for(let i=0;i<n.length;i+=1)n[i].addEventListener("click",(()=>{t.splice(i,1),localStorage.setItem("tasks",JSON.stringify(t)),s(e,t)}))},s=(t,n,i)=>{const l=document.querySelector("#tasks-list");l.innerHTML="";const r=document.querySelector("#add-task"),a=document.querySelector("#multiCollapseExample2");if("All Projects"===t){r.classList.add("d-none"),a.classList.add("d-none");const t=[];for(let e=0;e<i.length;e+=1)t.push(...i[e].tasks);console.log(t);for(let e=0;e<t.length;e+=1){const s=o.getColor(t,e);l.innerHTML+=`\n            <li class="">\n                        <p>\n                            <button class="btn btn-${s} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${e}" aria-expanded="false" aria-controls="task-${e}">\n                                ${t[e].title}\n                            </button>\n                        </p>\n                        \n                        <div class="collapse" id="task-${e}">\n                            <div class="card card-body bg-${s} mb-4">\n                                <ul class="list-group">\n                                    <li class="list-group-item bg-${s} text-white"><span class="fw-bold">Description</span>: ${t[e].description}</li>\n                                    <li class="list-group-item bg-${s} text-white"><span class="fw-bold">Due Date</span>: ${t[e].dueDate}</li>\n                                    <li class="list-group-item bg-${s} text-white"><span class="fw-bold">Priority</span>: ${t[e].priority}</li>\n                                </ul>\n                            </div>\n                        </div>\n                    </li>\n        `}}else{r.classList.remove("d-none"),a.classList.remove("d-none"),l.innerHTML="";const i=n.filter((e=>e.project===t));for(let t=0;t<i.length;t+=1){console.log(t);const e=o.getColor(i,t);l.innerHTML+=`\n            <li>\n                <p>\n                    <button class="btn btn-${e} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${t}" aria-expanded="false" aria-controls="task-${t}">\n                        ${i[t].title}\n                    </button>\n                </p>\n                    \n                <div class="collapse" id="task-${t}">\n                    <div class="card card-body bg-${e} mb-4">\n                        <ul class="list-group ">\n                            <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Description</span>: ${i[t].description}</li>\n                            <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Due Date</span>: ${i[t].dueDate}</li>\n                            <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Priority</span>: ${i[t].priority}</li>\n                        </ul>\n                    \n                        <div class="d-flex mt-3 justify-content-between">\n                            <div>\n                                <p>\n                                    <button class="btn btn-${o.buttonColor(e)[0]}" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample-${t}" aria-expanded="false" aria-controls="collapseExample-${t}">\n                                        Edit\n                                    </button>\n                                       \n                                    <div>\n                                        <button id="delete-btn" type="button" class="btn btn-${o.buttonColor(e)[1]}">Delete</button>\n                                    </div>\n                                </p>\n                                \n                                <div class="collapse multi-collapse" id="collapseExample-${t}">\n                                    <form id="edit-tasks-form">\n                                        <div class="mb-3">\n                                            <label for="edit-task-name-${t}" class="form-label text-info">Task Title</label>\n                                            <input type="text" class="form-control" id="edit-task-name-${t}" required>\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-description-${t}" class="form-label text-info">Task Description</label>\n                                            <input type="text" class="form-control" id="edit-task-description-${t}" required>\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-date-${t}" class="form-label text-info">Due Date</label>\n                                            <br>\n                                            <input type="date" id="edit-task-date-${t}" name="trip-start" required>\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-priority-${t}" class="form-label text-info">Priority</label>\n                                            <select id="edit-task-priority-${t}" class="form-select" aria-label="Default select example" required>\n                                                <option selected>Select Priority</option>\n                                                <option value="low">Low</option>\n                                                <option value="medium">Medium</option>\n                                                <option value="high">High</option>\n                                            </select>\n                                        </div>\n                                        \n                                        <div>\n                                            <button id="edit-btn" type="submit" class="btn btn-secondary">Edit Task</button>\n                                        </div\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </li>\n        `,document.querySelector(`#edit-task-name-${t}`).setAttribute("value",i[t].title),document.querySelector(`#edit-task-description-${t}`).setAttribute("value",i[t].description),document.querySelector(`#edit-task-date-${t}`).setAttribute("value",i[t].dueDate)}((t,e)=>{const n=document.querySelectorAll("#edit-btn");for(let i=0;i<n.length;i+=1)n[i].addEventListener("click",(()=>{const n=document.querySelector(`#edit-task-name-${i}`).value,o=document.querySelector(`#edit-task-description-${i}`).value,l=document.querySelector(`#edit-task-date-${i}`).value,r=document.querySelector(`#edit-task-priority-${i}`).value;""!==n&&""!==o&&""!==l&&""!==r&&(t[i].title=n,t[i].description=o,t[i].date=l,t[i].priority=r,localStorage.setItem("tasks",JSON.stringify(t)),s(e,t))}))})(n,t),e(n,t)}};return{createNewTask:(e,n)=>{const i=t();document.querySelector("#task-btn").addEventListener("click",(()=>{const e=i.querySelector("#task-name").value,l=i.querySelector("#task-description").value,r=i.querySelector("#task-date").value,a=i.querySelector("#task-priority").value,c=i.querySelector("#task-project").value,d=n.filter((t=>t.title===c));""!==e&&""!==l&&""!==r&&""!==a&&(o.newTask(d[0].tasks,e,l,r,a,c),console.log(d[0].tasks),localStorage.setItem("tasks",JSON.stringify(d[0].tasks)),t(),s(c,d[0].tasks,n))}))},renderTasks:s,deleteTask:e}})(),s=(()=>{const t=()=>{const t=document.forms["project-form"];return t.addEventListener("submit",(t=>{t.preventDefault()})),t},s=t=>{const e=document.querySelector("#project-list");e.innerHTML='\n            <li class="list-group-item list-group-item-dark btn my-1" id="all-projects">All Projects</li>\n        ';for(let s=0;s<t.length;s+=1)e.innerHTML+=`\n                <li class="list-group-item list-group-item-dark btn my-1" id="project-list">${t[s].title}</li>\n            `};return{addProject:e=>{document.querySelector("#project-btn").addEventListener("click",(()=>{t(),((t,e)=>{const s=e().querySelector("#project-title").value;""!==s&&(l.newProject(s,t),localStorage.setItem("projects",JSON.stringify(t)))})(e,t),s(e),document.querySelector("#project-form").reset()}))},displayProjectTasks:(t,s)=>{const n=document.querySelector("#project-list");n.addEventListener("click",(i=>{const o=i.target.textContent,l=s.filter((t=>t.title===o));((t,e)=>{const s=t.target;[...e.children].forEach((t=>{t.classList.remove("active")})),s.classList.add("active"),document.querySelector("#task-display").classList.remove("d-none")})(i,n),(t=>{const e=document.querySelector("#project");e.innerHTML="",e.innerHTML+=`\n        <input type="hidden" value="${t}" id="task-project" class="form-control" aria-label="Default select example">\n    `})(o),"All Projects"===o?e.renderTasks(o,t,s):e.renderTasks(o,l[0].tasks,s)}))},renderProjectView:s}})();let n=JSON.parse(localStorage.getItem("projects"))||[];const i=JSON.parse(localStorage.getItem("tasks"))||[{title:"Task 1",description:"Description 1",dueDate:"2021-06-10",priority:"low",project:"Project 1",exists:!0},{title:"Task 2",description:"Description 2",dueDate:"2021-06-10",priority:"medium",project:"Project 2",exists:!0},{title:"Task 3",description:"Description 3",dueDate:"2021-06-10",priority:"high",project:"Project 3",exists:!0}];class o{constructor(t,e,s,n,i="default"){this.title=t,this.description=e,this.dueDate=s,this.priority=n,this.project=i}static newTask(t,e,s,n,i,l){const r=new o(e,s,n,i,l);t.push(r)}static getColor(t,e){let s;return s="low"===t[e].priority?"success":"medium"===t[e].priority?"info":"danger",s}static buttonColor(t){let e,s;return"success"!==t&&"info"!==t||(e="warning",s="danger"),"danger"===t&&(e="primary",s="warning"),[e,s]}}class l{constructor(t){this.title=t,this.tasks=[]}static newProject(t,e){const s=new l(t);e.push(s)}}s.renderProjectView(n),s.addProject(n),s.displayProjectTasks(i,n),e.createNewTask(i,n)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,