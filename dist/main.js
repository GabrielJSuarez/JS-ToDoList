(()=>{"use strict";var t={d:(e,s)=>{for(var n in s)t.o(s,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:s[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};t.d({},{I:()=>o,i:()=>r});const e=(()=>{const t=()=>{const t=document.forms["tasks-form"];return t.addEventListener("submit",(t=>{t.preventDefault()})),t},s=(t,e,s,n)=>{n.addEventListener("click",(n=>{n.target.id===`delete-btn-${s}`&&(t[s].exists=!1,i(e,t))}))},n=(t,e,s,n)=>{n.addEventListener("click",(n=>{if(n.target.id===`edit-btn-${s}`){const n=document.querySelector(`#edit-task-name-${s}`).value,r=document.querySelector(`#edit-task-description-${s}`).value,o=document.querySelector(`#edit-task-date-${s}`).value,l=document.querySelector(`#edit-task-priority-${s}`).value;if(""===n)return;if(""===r)return;if(""===o)return;if(""===l)return;t[s].title=n,t[s].description=r,t[s].dueDate=o,t[s].priority=l,i(e,t)}}))},i=(t,i)=>{const o=document.querySelector("#tasks-list");o.innerHTML="";const l=i.filter((e=>e.project===t&&!0===e.exists));for(let i=0;i<l.length;i+=1){const a=r.getColor(l,i);o.innerHTML+=`\n            <li>\n                <p>\n                    <button class="btn btn-${a} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${i}" aria-expanded="false" aria-controls="task-${i}">\n                        ${l[i].title}\n                    </button>\n                </p>\n                    \n                <div class="collapse" id="task-${i}">\n                    <div class="card card-body bg-${a} mb-4">\n                        <ul class="list-group ">\n                            <li class="list-group-item bg-${a} text-white"><span class="fw-bold">Description</span>: ${l[i].description}</li>\n                            <li class="list-group-item bg-${a} text-white"><span class="fw-bold">Due Date</span>: ${l[i].dueDate}</li>\n                            <li class="list-group-item bg-${a} text-white"><span class="fw-bold">Priority</span>: ${l[i].priority}</li>\n                        </ul>\n                    \n                        <div class="d-flex mt-3 justify-content-between">\n                            <div>\n                                <p>\n                                    <button class="btn btn-${r.buttonColor(a)[0]}" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample-${i}" aria-expanded="false" aria-controls="collapseExample-${i}">\n                                        Edit\n                                    </button>\n\n                                    <button id="delete-btn-${i}" type="button" class="btn btn-${r.buttonColor(a)[1]}">Delete</button>\n                                </p>\n\n                                <div class="collapse multi-collapse" id="collapseExample-${i}">\n                                    <form id="edit-tasks-form">\n                                        <div class="mb-3">\n                                            <label for="edit-task-name" class="form-label text-info">Task Title</label>\n                                            <input type="text" class="form-control" id="edit-task-name-${i}">\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-description" class="form-label text-info">Task Description</label>\n                                            <input type="text" class="form-control" id="edit-task-description-${i}">\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-date" class="form-label text-info">Due Date</label>\n                                            <br>\n                                            <input type="date" id="edit-task-date-${i}" name="trip-start">\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-priority" class="form-label text-info">Priority</label>\n                                            <select id="edit-task-priority-${i}" class="form-select" aria-label="Default select example">\n                                                <option selected>Select Priority</option>\n                                                <option value="low">Low</option>\n                                                <option value="medium">Medium</option>\n                                                <option value="high">High</option>\n                                            </select>\n                                        </div>\n                                        <div>\n                                            <button id="edit-btn-${i}" type="submit" class="btn btn-secondary">Edit Task</button>\n                                        </div\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </li>\n            `,document.querySelector(`#edit-task-name-${i}`).setAttribute("value",l[i].title),document.querySelector(`#edit-task-description-${i}`).setAttribute("value",l[i].description),document.querySelector(`#edit-task-date-${i}`).setAttribute("value",l[i].dueDate),document.querySelector(`#edit-task-priority-${i}`).setAttribute("value",l[i].priority),s(l,t,i,o,e.renderTask),n(l,t,i,o,e.renderTask)}};return{createNewTask:e=>{const s=t();document.querySelector("#task-btn").addEventListener("click",(()=>{const n=s.querySelector("#task-name").value,o=s.querySelector("#task-description").value,l=s.querySelector("#task-date").value,a=s.querySelector("#task-priority").value,c=s.querySelector("#task-project").value;""!==n&&""!==o&&""!==l&&""!==a&&(r.newTask(e,n,o,l,a,c),localStorage.setItem("tasks",JSON.stringify(e)),t(),i(c,e),document.querySelector("#tasks-form").reset())}))},renderTask:i}})(),s=(()=>{const t=()=>{const t=document.forms["project-form"];return t.addEventListener("submit",(t=>{t.preventDefault()})),t},s=t=>{const e=document.querySelector("#project-list");e.innerHTML='\n            <li class="list-group-item list-group-item-dark btn my-1" id="all-projects">All Projects</li>\n        ';for(let s=0;s<t.length;s+=1)e.innerHTML+=`\n                <li class="list-group-item list-group-item-dark btn my-1" id="project-list">${t[s].title}</li>\n            `};return{addProject:e=>{document.querySelector("#project-btn").addEventListener("click",(()=>{t(),((t,e)=>{const s=e().querySelector("#project-title").value;""!==s&&(o.newProject(s,t),localStorage.setItem("projects",JSON.stringify(t)))})(e,t),s(e),document.querySelector("#project-form").reset()}))},displayProjectTasks:(t,s)=>{const n=document.querySelector("#project-list");n.addEventListener("click",(s=>{const i=s.target.textContent;((t,e)=>{const s=t.target;[...e.children].forEach((t=>{t.classList.remove("active")})),s.classList.add("active"),document.querySelector("#task-display").classList.remove("d-none")})(s,n),(t=>{const e=document.querySelector("#project");e.innerHTML="",e.innerHTML+=`\n        <input type="hidden" value="${t}" id="task-project" class="form-control" aria-label="Default select example">\n    `})(i),((t,s)=>{const n=document.querySelector("#tasks-list");n.innerHTML="";const i=s.filter((t=>!0===t.exists)),o=document.querySelector("#add-task"),l=document.querySelector("#multiCollapseExample2");if("All Projects"===t){o.classList.add("d-none"),l.classList.add("d-none");for(let t=0;t<i.length;t+=1){const e=r.getColor(i,t);n.innerHTML+=`\n                    <li class="">\n                        <p>\n                            <button class="btn btn-${e} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${t}" aria-expanded="false" aria-controls="task-${t}">\n                                ${i[t].title}\n                            </button>\n                        </p>\n                        \n                        <div class="collapse" id="task-${t}">\n                            <div class="card card-body bg-${e} mb-4">\n                                <ul class="list-group">\n                                    <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Description</span>: ${i[t].description}</li>\n                                    <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Due Date</span>: ${i[t].dueDate}</li>\n                                    <li class="list-group-item bg-${e} text-white"><span class="fw-bold">Priority</span>: ${i[t].priority}</li>\n                                </ul>\n                            </div>\n                        </div>\n                    </li>\n                `}}else o.classList.remove("d-none"),l.classList.remove("d-none"),e.renderTask(t,s)})(i,t)}))},renderProjectView:s}})();let n=JSON.parse(localStorage.getItem("projects"))||[];const i=JSON.parse(localStorage.getItem("tasks"))||[];class r{constructor(t,e,s,n,i="default"){this.title=t,this.description=e,this.dueDate=s,this.priority=n,this.project=i,this.exists=!0}static newTask(t,e,s,n,i,o){const l=new r(e,s,n,i,o);t.push(l)}static getColor(t,e){let s;return s="low"===t[e].priority?"success":"medium"===t[e].priority?"info":"danger",s}static buttonColor(t){let e,s;return"success"!==t&&"info"!==t||(e="warning",s="danger"),"danger"===t&&(e="primary",s="warning"),[e,s]}}class o{constructor(t){this.title=t}static newProject(t,e){const s=new o(t);e.push(s)}}s.renderProjectView(n),s.addProject(n),s.displayProjectTasks(i),e.createNewTask(i,r),console.log(n)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,