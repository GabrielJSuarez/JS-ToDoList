(()=>{"use strict";const t=(t,e)=>{let s;return s="low"===t[e].priority?"success":"medium"===t[e].priority?"info":"danger",s},e=t=>{let e,s;return"success"!==t&&"info"!==t||(e="warning",s="danger"),"danger"===t&&(e="primary",s="warning"),[e,s]},s=t=>{const e=[];for(let s=0;s<t.length;s+=1)e.push(...t[s].tasks);return e};class n{constructor(t,e,s,n,i="default"){this.title=t,this.description=e,this.dueDate=s,this.priority=n,this.project=i}static deleteTask(t,e,s,n){const i=document.querySelectorAll("#delete-btn");for(let l=0;l<i.length;l+=1)i[l].addEventListener("click",(()=>{t.splice(l,1),localStorage.setItem("projects",JSON.stringify(s)),n(e,t)}))}static editTask(t,e,s,n){const i=document.querySelectorAll("#edit-btn");for(let l=0;l<i.length;l+=1)i[l].addEventListener("click",(()=>{const i=document.querySelector(`#edit-task-name-${l}`).value,a=document.querySelector(`#edit-task-description-${l}`).value,r=document.querySelector(`#edit-task-date-${l}`).value,o=document.querySelector(`#edit-task-priority-${l}`).value;""!==i&&""!==a&&""!==r&&""!==o&&(t[l].title=i,t[l].description=a,t[l].date=r,t[l].priority=o,localStorage.setItem("projects",JSON.stringify(s)),n(e,t))}))}}const i=(()=>{const i=()=>{const t=document.forms["tasks-form"];return t.addEventListener("submit",(t=>{t.preventDefault()})),t},l=(i,a,r)=>{const o=document.querySelector("#tasks-list");o.innerHTML="";const c=document.querySelector("#add-task"),d=document.querySelector("#multiCollapseExample2");if("All Tasks"===i){c.classList.add("d-none"),d.classList.add("d-none");const e=s(r);for(let s=0;s<e.length;s+=1){const n=t(e,s);o.innerHTML+=`\n            <li class="">\n                        <p>\n                            <button class="btn btn-${n} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${s}" aria-expanded="false" aria-controls="task-${s}">\n                                ${e[s].title}\n                            </button>\n                        </p>\n                        \n                        <div class="collapse" id="task-${s}">\n                            <div class="card card-body bg-${n} mb-4">\n                                <ul class="list-group">\n                                    <li class="list-group-item bg-${n} text-white"><span class="fw-bold">Description</span>: ${e[s].description}</li>\n                                    <li class="list-group-item bg-${n} text-white"><span class="fw-bold">Due Date</span>: ${e[s].dueDate}</li>\n                                    <li class="list-group-item bg-${n} text-white"><span class="fw-bold">Priority</span>: ${e[s].priority}</li>\n                                </ul>\n                            </div>\n                        </div>\n                    </li>\n        `}}else{c.classList.remove("d-none"),d.classList.remove("d-none"),o.innerHTML="";for(let s=0;s<a.length;s+=1){const n=t(a,s);o.innerHTML+=`\n            <li>\n                <p>\n                    <button class="btn btn-${n} w-100" type="button" data-bs-toggle="collapse" data-bs-target="#task-${s}" aria-expanded="false" aria-controls="task-${s}">\n                        ${a[s].title}\n                    </button>\n                </p>\n                    \n                <div class="collapse" id="task-${s}">\n                    <div class="card card-body bg-${n} mb-4">\n                        <ul class="list-group ">\n                            <li class="list-group-item bg-${n} text-white"><span class="fw-bold">Description</span>: ${a[s].description}</li>\n                            <li class="list-group-item bg-${n} text-white"><span class="fw-bold">Due Date</span>: ${a[s].dueDate}</li>\n                            <li class="list-group-item bg-${n} text-white"><span class="fw-bold">Priority</span>: ${a[s].priority}</li>\n                        </ul>\n                    \n                        <div class="d-flex mt-3 justify-content-between">\n                            <div>\n                                <p>\n                                    <button class="btn btn-${e(n)[0]}" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample-${s}" aria-expanded="false" aria-controls="collapseExample-${s}">\n                                        Edit\n                                    </button>\n                                       \n                                    <button id="delete-btn" type="button" class="btn btn-${e(n)[1]}">Mark as complete</button>\n                                </p>\n                                \n                                <div class="collapse multi-collapse" id="collapseExample-${s}">\n                                    <form id="edit-tasks-form">\n                                        <div class="mb-3">\n                                            <label for="edit-task-name-${s}" class="form-label text-info">Task Title</label>\n                                            <input type="text" class="form-control" id="edit-task-name-${s}" required>\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-description-${s}" class="form-label text-info">Task Description</label>\n                                            <input type="text" class="form-control" id="edit-task-description-${s}" required>\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-date-${s}" class="form-label text-info">Due Date</label>\n                                            <br>\n                                            <input type="date" id="edit-task-date-${s}" name="trip-start" required>\n                                        </div>\n                        \n                                        <div class="mb-3">\n                                            <label for="edit-task-priority-${s}" class="form-label text-info">Priority</label>\n                                            <select id="edit-task-priority-${s}" class="form-select" aria-label="Default select example" required>\n                                                <option selected>Select Priority</option>\n                                                <option value="low">Low</option>\n                                                <option value="medium">Medium</option>\n                                                <option value="high">High</option>\n                                            </select>\n                                        </div>\n                                        \n                                        <div>\n                                            <button id="edit-btn" type="submit" class="btn btn-secondary">Edit Task</button>\n                                        </div\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </li>\n        `,document.querySelector(`#edit-task-name-${s}`).setAttribute("value",a[s].title),document.querySelector(`#edit-task-description-${s}`).setAttribute("value",a[s].description),document.querySelector(`#edit-task-date-${s}`).setAttribute("value",a[s].dueDate)}n.editTask(a,i,r,l),n.deleteTask(a,i,r,l)}};return{createNewTask:t=>{const e=i();document.querySelector("#task-btn").addEventListener("click",(()=>{const s=e.querySelector("#task-name").value,a=e.querySelector("#task-description").value,r=e.querySelector("#task-date").value,o=e.querySelector("#task-priority").value,c=e.querySelector("#task-project").value,d=t.filter((t=>t.title===c));if(""===s)return;if(""===a)return;if(""===r)return;if(""===o)return;const u=new n(s,a,r,o,c);d[0].tasks.push(u),localStorage.setItem("projects",JSON.stringify(t)),i(),l(c,d[0].tasks,t)}))},renderTasks:l}})();class l{constructor(t){this.title=t,this.tasks=[]}static newProject(t,e){const s=new l(t);e.push(s)}}const a=(()=>{const t=()=>{const t=document.forms["project-form"];return t.addEventListener("submit",(t=>{t.preventDefault()})),t},e=t=>{const e=document.querySelector("#project-list");e.innerHTML='\n            <li class="list-group-item list-group-item-dark btn my-1" id="all-projects">All Tasks</li>\n        ';for(let s=0;s<t.length;s+=1)e.innerHTML+=`\n                <li class="list-group-item list-group-item-dark btn my-1" id="project-list">${t[s].title}</li>\n            `};return{addProject:s=>{document.querySelector("#project-btn").addEventListener("click",(()=>{t(),((t,e)=>{const s=e().querySelector("#project-title").value;""!==s&&(l.newProject(s,t),localStorage.setItem("projects",JSON.stringify(t)))})(s,t),e(s),document.querySelector("#project-form").reset()}))},displayProjectTasks:t=>{const e=document.querySelector("#project-list");e.addEventListener("click",(n=>{const l=n.target.textContent,a=t.filter((t=>t.title===l)),r=s(t);((t,e)=>{const s=t.target;[...e.children].forEach((t=>{t.classList.remove("active")})),s.classList.add("active"),document.querySelector("#task-display").classList.remove("d-none")})(n,e),(t=>{const e=document.querySelector("#project");e.innerHTML="",e.innerHTML+=`\n        <input type="hidden" value="${t}" id="task-project" class="form-control" aria-label="Default select example">\n    `})(l),"All Tasks"===l?i.renderTasks(l,r,t):i.renderTasks(l,a[0].tasks,t)}))},renderProjectView:e}})(),r=JSON.parse(localStorage.getItem("projects"))||[];a.renderProjectView(r),a.addProject(r),a.displayProjectTasks(r),i.createNewTask(r)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,